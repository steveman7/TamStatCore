:Namespace Test
⍝ === VARIABLES ===

T37←4 4⍴98 97 99 96 91 90 93 92 96 95 97 95 95 96 99 98

T53←4 4 1⍴({⎕io←0⋄0.93 0.94 0.96 1 0.94 0.93 0.98 0.99 0.92 0.94 0.95 0.97 0.97 0.96 1 1.02⊣⎕fr←⍵}1287)

T718←3 2 2 2⍴¯3 ¯1 ¯1 0 ¯1 0 1 1 0 1 2 1 2 3 6 5 5 4 7 6 7 9 10 11

T76←3 3 4⍴130 155 74 180 34 40 80 75 20 70 82 58 150 188 159 126 136 122 106 115 25 70 58 45 138 110 168 160 174 120 150 139 96 104 82 60


⍝ === End of variables definition ===

(⎕IO ⎕ML ⎕WX)←1 1 3

∇ runRegress

∇

∇ Z←API_Test
 #.TamStat.R_Available←0
 confIntAPI_test''
 sampleSizeAPI_test''
 hypothesisAPI_test''
 chiSquareAPI_test''
 anovaAPI_test''
 Z←0
∇

 Create_Regress←{
     ⎕IO←0 ⋄ ⎕ML←3
     Height←68 3 normal randomVariable ⍵
     ShoeSize←0.5×10 21 uniform randomVariable ⍵
     Sex←↓⍪'MF'[1 0.5 binomial randomVariable ⍵]
     Weight←140 20 normal randomVariable ⍵
     _←'MODEL'⎕NS'Height' 'ShoeSize' 'Sex' 'Weight'
     Database←MODEL
     Expressions←'Height' 'ShoeSize' '(Sex eq ''M'')' '(ln Weight)'
     Select←1 1 1 1
     Intercept←1
     Type←'Regress'
     ⎕NS'Database' 'Expressions' 'Select' 'Intercept' 'Type'
 }

 RunTest←{
         ⍝ SETUP'R'
     ⎕ML←3 ⋄ ⎕IO←0
     FN←'StudentData.csv'
     D←importTest FN
     ~(⊂'Height')∊variables D:⎕LC
     _←relative frequency D.State
     'PA' 16≢(¯1 frequency D.State)[0;]:⎕LC
     _←¯1 frequency show D.State
     3≠(frequency D.Sex D.Party)[1;1]:⎕LC
     _←(⍳4)frequency show¨⊂D.Sex D.Party
     _←pieChart D.State
     _←barChart frequency D.Sex
     _←barChart ¯1 frequency D.State
     _←barChart D.Sex D.Party
     _←histogram D.Height
     _←histogram 5 frequency D.Height
     _←stemAndLeaf D.Height
     _←5 stemAndLeaf D.Height
     _←boxPlot D.Height
     70≠median D.Height:⎕LC
     71≠mode D.Height:⎕LC
     'PA'≢mode D.State:⎕LC
     0.0005<|20.036-var D.Height:⎕LC
     0.00005<|4.4762-sdev D.Height:⎕LC
     66 72≢1 3 quartile D.Height:⎕LC
     6 5.75∧.≠iqr D.Height:⎕LC
     65 75≢20 95 percentile D.Height:⎕LC
     0.00005<|¯1.0497-skewness D.Height:⎕LC
     0.005<|124.23-D.Height cov D.Weight:⎕LC
     0.000005<|0.65807-D.Height corr D.Weight:⎕LC
     0.00005<|1.6842-mean frequency D.Family:⎕LC
     0.00005<|0.87055-var frequency D.Family:⎕LC
     0.00005<|0.84765-var relative frequency D.Family:⎕LC
     0.25=proportion'HH,HT,TH,TT'eq'H':⎕LC
     X←1 2 3 4 5 6
     3≠÷proportion X>4:⎕LC
     0.00005<|0.57895-proportion D.Party ne'R':⎕LC
     0.000005<|0.42105-proportion D.Party eq'R':⎕LC
     0.000005<|0.71053-proportion(D.Party eq'D')or(D.Party eq'R'):⎕LC
     0.000005<|0.31579-proportion(D.Party eq'R')and(D.Sex eq'M'):⎕LC
     0.75≠proportion(D.Sex eq'M')given(D.Party eq'R'):⎕LC
     PRIOR←0.03 0.97
     COND←0.9 0.02
     0.00005∨.<|0.5819 0.4181-bayes PRIOR COND:⎕LC
     3.5≠6 uniform theoretical mean 0:⎕LC
     0.00005<|2.9167-6 uniform theoretical var 0:⎕LC
     0.00005<|1.7078-6 uniform theoretical sdev 0:⎕LC
     OUTCOMES←'DEATH' 'DISABILITY' 'NEITHER'
     PAYOUTS←100000 50000 0
     PROBS←0.001 0.002 0.997
     0.002≠PAYOUTS PROBS multinomial 50000:⎕LC
     VARX←PAYOUTS PROBS multinomial theoretical var 0
     VARY←PAYOUTS PROBS multinomial theoretical var 0
     0.05<|5469.9-sqrt VARX+VARY:⎕LC
     (÷6)∨.≠6 uniform X:⎕LC
     0.5≠6 uniform probability>3:⎕LC
     0.3125≠5 0.5 binomial 2:⎕LC
     0.8125≠5 0.5 binomial probability ge 2:⎕LC
     0.00005<|0.63174-4 0.221 binomial probability ge 1:⎕LC
     3≠15 0.2 binomial theoretical mean 0:⎕LC
     2.4≠15 0.2 binomial theoretical var 0:⎕LC
     0.000005<|0.25014-15 0.2 binomial probability=3:⎕LC
     0.000005<|0.60198-15 0.2 binomial probability ge 3:⎕LC
     0.000005<|0.54093-15 0.2 binomial probability between 2 6:⎕LC
     0.000005<|0.14622-5 poisson probability=6:⎕LC
     0.000005<|0.9863-5 poisson probability le 10:⎕LC
     ~0.5 1.5 between⍨(mean÷var)5 poisson randomVariable 100:⎕LC
     0.5≠20 rectangular probability<10:⎕LC
     0.75≠20 rectangular probability ge 5:⎕LC
     0≠20 rectangular probability=10:⎕LC
     0.05≠20 rectangular probability between 9.5 10.5:⎕LC
     0.000005<|0.30119-0.001 exponential probability>1200:⎕LC
     2≠0.001 exponential theoretical skewness 0:⎕LC
     0.005<|693.15-0.001 exponential theoretical median 0:⎕LC
     0.00005<|0.7135-5 exponential probability<0.25:⎕LC
     0.000005<|0.89435-normal probability<1.25:⎕LC
     0.00005<|1.6449-normal criticalValue<0.05:⎕LC
     0.00005<|¯0.5244-normal criticalValue>0.3:⎕LC
     0.00005<|0.90879-68 3 normal probability<72:⎕LC
     0.00005<|0.74368-68 3 normal probability between 60 70:⎕LC
     0.0005<|72.935-68 3 normal criticalValue>0.95:⎕LC
     5E¯7<|0.013939-464 0.95 binomial probability>450:⎕LC
     MU←464 times 0.95
     SIGMA←sqrt 464 times 0.95 times 1-0.95
     0.000005<|0.019406-MU SIGMA normal probability>450.5:⎕LC
       ⍝   ##.R_Available←0
     
     ADS←1 3 2 1 3
     CARS←14 24 18 17 27
     MODEL←CARS regress ADS
     10 5≢MODEL.B:⎕LC
     20≠MODEL.f 2:⎕LC
     16 23≢⌊MODEL.f confInt 2:⎕LC
     12 27≢⌊MODEL.f predInt 2:⎕LC
     ⎕←summaryTest
     ⎕←density_test
     ⎕←probability_test''
     ⎕←distribution_test
     ⎕←criticalValue_test
     ⎕←chiSquare_Test
     ⎕←randomVariable_test
      ⍝    ⎕←hypothesis_test
     ⎕←confInt_Test
     ⎕←regress_test''
     ⎕←matrix_test 10 1
     ⎕←API_Test
     0
 }

 anovaAPI_test←{
      ⍝Written by Steve Mansour 7/17/2019
      ⍝  Examples of how to use hypothesisAPI
     
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←anovaAPI NS
         ⍝ NS.UserSpace.D1←import'E:\UofS\StudentSurvey.csv'
         ⍝ NS.UserSpace.PP←import'E:\UofS\Production_problems.csv'
     NS.UserSpace.D1←importTest'StudentSurvey.csv'
     NS.UserSpace.PP←importTest'Production_problems.csv'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ One-Way ANOVA Stats ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Table←3 4⍴'PA' 5 72 3.4 'NJ' 6 68 4.1 'NY' 5 69 3.7
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ One-Way ANOVA Data ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'Var'put'D1.Height')
     NS.EventArg←'Var'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.(Grid.Values←'Factor1'put'D1.Party')
     NS.EventArg←'Factor1'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Blocked ANOVA Stats ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Var'NS.put'stats'
     NS.EventArg←'Var'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.(Grid.Values←'Design' 'Factor1' 'Factor2'put'blocked' 2 3)
     NS.Table←3 4⍴'*' 'Dem' 'Ind' 'Rep' 'Male' 2.1 3.2 4.2 'Female' 1.9 1.2 3.7
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Two-Way ANOVA Data ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Var'NS.put'PP.SizeError'
     NS.EventArg←'Var'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.(Grid.Values←'LeftArg' 'Design'put 2 'factor')
     NS.(Grid.Values←'Factor1' 'Factor2'put'PP.Machine' 'PP.Shift')
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Latin Square ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Design'NS.put'latinSquare'
     NS.EventArg←'Design'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.(Grid.Values←'Factor1'put 5)
     NS.EventArg←'Factor1'
     NS.Event←'Select'
     NS←anovaAPI NS
     X←5 5⍴24 20 19 24 24 17 24 30 27 36 18 38 26 27 21 26 31 26 23 22 22 30 20 29 31
     NS.Table[;1 3 5 7 9]←X
     NS.Grid.Values←'Var'NS.put'stats'
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
         ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Factorial2k ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Design'NS.put'factorial2k'
     NS.EventArg←'Design'
     NS.Event←'Select'
     NS←anovaAPI NS
     NS.(Grid.Values←'Factor1' 'Factor2'put 3 2)
     NS.EventArg←'Factor1'
     NS.Event←'Select'
     NS.Grid.Values←'Var'NS.put'stats'
     NS←anovaAPI NS
     NS.EventArg←'Factor2'
     NS.Event←'Select'
     NS←anovaAPI NS
     X←8 2⍴¯3 ¯1 0 1 ¯1 0 2 3 ¯1 0 2 1 1 1 6 5 ⍝ Rows = treatment combinations
     NS.Table[;1 2]←X
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Factorial2k ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'LeftArg' 'Factor1' 'Factor2'put'ABCD' 3 1)
     NS.LeftArg←'ABCD'
     NS.Event←'Select'
     NS.EventArg←'Factor1'
     NS←anovaAPI NS
     NS.Grid.Values←'Var'NS.put'stats'
     NS.EventArg←'Factor2'
     NS←anovaAPI NS
     X←45 100 45 65 75 60 80 96
     NS.Table[;1]←X
     NS.Event←'Run'
     NS←anovaAPI NS
     ⎕←NS.Expr
     ⎕←100↑[1]NS.Output
     
     
     
     
     
     
 }

 anova_test←{
      ⍝Written by Steve Mansour 6/28/2022
      ⍝  Examples of how to use anova
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←1 ⋄ ⎕ML←1
     D1←importTest'StudentSurvey.csv'
     PP←importTest'Production_problems.csv'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ One-Way ANOVA Stats ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
        ⍝  NS.Table←3 4⍴'PA' 5 72 3.4 'NJ' 6 68 4.1 'NY' 5 69 3.7
     BL←?4 4⍴10 ⍝ Blocked Data
     ⎕←report oneWay anova BL
     ⎕←report blocked anova BL
     ⎕←report 1 factor anova BL
     ⎕←report 2 factor anova BL
     ⎕←report 3 factor anova BL     ⍝ Latin Square
     ⎕←report latinSquare anova BL
     ⎕←0.05 report oneWay anova('A'stats 5 14 3)('B'stats 5 13 2)('C'stats 5 15 3)
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ One-Way ANOVA Data ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕←report oneWay anova D1.Height D1.Party
     ⎕←report oneWay anova D1'Height Party'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Factorial Designs ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕←report 2 factor anova PP.SizeError PP.Machine PP.Shift
     ⎕←report 2 factor anova PP'SizeError Shift Machine'
         ⍝ ⎕←report blocked anova PP.SizeError PP.Machine PP.Shift
     ⍝    ⎕←report blocked anova PP'SizeError Shift Machine'
     ⎕←report blocked anova 3 3 3⍴PP.SizeError
     ⎕←report 2 factor anova⊢U←?3 4 3⍴100
     ⎕←report 3 factor anova U
     ⎕←report 0 2 factor anova U                   ⍝ Random Factors
     ⎕←report 1 1 factor anova U                   ⍝ Mixed Factors
     ⎕←report 3 factor anova⊢V←?3 3 3 4⍴100        ⍝ 3-factor anova
     ⎕←report 3 factor anova V
     ⎕←report 2 factor anova?3 4⍴⊂10 10           ⍝ Nested Array
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ 2k Factorial Designs ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕←report factorial2k anova 4 3⍴28 25 27 36 32 32 18 19 23 31 30 29
     ⎕←report factorial2k anova 8 2⍴¯3 ¯1 ¯1 0 ¯1 0 1 1 0 1 2 1 2 3 6 5
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Fractional Factorial Designs ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕←report'ABC'factorial2k anova 4 2⍴1037 1052 669 650 633 601 729 860
     ⎕←report'ABD' 'ACE'factorial2k anova 6 9 35 50 18 22 40 63
 }

 chiSquareAPI_test←{
      ⍝Written by Steve Mansour 7/17/2019
      ⍝  Examples of how to use hypothesisAPI
         ⍝ D1←import'E:\UofS\StudentSurvey.csv'
     D1←importTest'StudentSurvey.csv'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←chiSquareAPI NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test Uniform Gof  ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
         ⍝NS.GridValues←'Sig' 'Dist' 'Op' 'Var' NS.put .05 'uniform' 'goodnessOfFit' 3
     NS.Table←4 3⍴'DE' 9 0.25 'NJ' 21 0.25 'NY' 28 0.25 'PA' 42 0.25
     NS.Event←'Run'
     NS←chiSquareAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
     ⎕←NS.Conclusion
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test Multinomial Gof ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Dist'NS.put'multinomial'
     NS.Table[;2]←0.4 0.3 0.2 0.1
     NS.Event←'Run'
     NS←chiSquareAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
     ⎕←NS.Conclusion
           ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test Normal  Gof ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
         ⍝ NS.Grid.Values←'Dist'NS.put'normal'
     ⍝     NS.Table[;2]←0.1 0.2 0.3 0.4
     ⍝     NS.Table←1 2 3 4 5 6,2 3 5 8 7 1,[0.5]0
     ⍝     NS.VarType←'Char'
     ⍝     NS.Event←'Run'
     ⍝     NS←chiSquareAPI NS
     ⍝     ⎕←NS.Grid.(Values Attributes.Type)
     ⍝     ⎕←NS.Expr
     ⍝     ⎕←NS.Output
     ⍝     ⎕←NS.Conclusion
            ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test independent ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Op'NS.put'independent'
     NS.Event←'Select'
     NS.EventArg←'Op'
     NS←chiSquareAPI NS
     NS.Table←3 3⍴'*' 'Male' 'Female' 'Yes' 25 15 'No' 17 35
     NS.Event←'Run'
     NS←chiSquareAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
     ⎕←NS.Conclusion
     
 }

∇ Z←chiSquare_Test;X;SEX;PARTY;STATE;FAMILY;HEIGHT;SP;P;SNP;PS;S;R;I;A;T;randomize
     ⍝ Compare R to TamStat
 randomize←{d←toNestedVector ⍵ ⋄ d[?⍺⍴≢d]}
 SEX←100 randomize'Male,Female'
 PARTY←100 randomize'Dem,Rep,Ind'
 STATE←100 randomize'CT,MD,NY,NJ,PA'
 FAMILY←100 randomize 0 1 2 3 4
 HEIGHT←68 3 normal randomVariable 100
     ⍝ PS←frequency PARTY SEX
 S←frequency STATE
 P←5 10 15 30 40               ⍝ Percents
 SNP←'*' 'COUNT' 'PCT'⍪S,P     ⍝ Value, Observed, Percents
 SP←1↓1 0 1/SNP
 R←I←0
 :Repeat
     #.TamStat.R_Available←I
     T←R
     A←PARTY independent SEX
     A,←independent PARTY SEX
     A,←independent frequency PARTY SEX
     R←A.TestStatistic
     R,←A.P
     A←uniform goodnessOfFit=STATE
     A,←uniform goodnessOfFit=S
     R,←A.TestStatistic
     R,←A.P
     A←SP multinomial goodnessOfFit=STATE
     A,←multinomial goodnessOfFit=SNP
     A,←SP goodnessOfFit=STATE
     R,←A.TestStatistic
     R,←A.P
     I+←1
 :Until I=2
     
     
     
 Z←(,T-R)+.*2   ⍝T=TamStat, R = R
 Z←'ChiSq Test:'Z
∇

 confIntAPI_test←{
          ⍝∊ Written by Steve Mansour 6/28/2019
          ⍝ Examples of how to use confIntAPI
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialize ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
     #.D←importTest'StudentSurvey.csv'
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←confIntAPI NS
     display←{⎕←'Grid:'⍵.(Grid.Values Grid.Attributes.Type)
         ⎕←'Point:'⍵.PointEstimate
         ⎕←'Result:'⍵.Results
         ⎕←'Labels:'⍵.ResultsLabels
         ⎕←'Expr:'⍵.Expr
         ⎕←'Output:'⍵.Output
         1}
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Mean ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'SampSize'NS.put 30
     NS.Grid.Values←'Mean'NS.put 68
     NS.Grid.Values←'Sdev'NS.put 3.5
     NS.Event←'Run'
     NS.Levels←0.8 0.9 0.95 0.99
     NS←confIntAPI NS
     _←display NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Difference of Means ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'LbSample2'NS.put' - Sample2'
     NS.Event←'Select'
     NS.EventArg←'LbSample2'
     NS←confIntAPI NS
     NS.Grid.Values←'SampSize2'NS.put 40
     NS.Grid.Values←'Mean2'NS.put 64
     NS.Grid.Values←'Sdev2'NS.put 2.7
     NS.Grid.Values←'SampSize'NS.put 30
     NS.Grid.Values←'Mean'NS.put 68
     NS.Grid.Values←'Sdev'NS.put 3.5
     NS.Event←'Run'
     NS←confIntAPI NS
     _←display NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝  Proportion ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'proportion' ⍝ Change to Proportion
     NS.Event←'Select'
     NS.EventArg←'Parameter'
     NS←confIntAPI NS
     NS.Grid.Values←'LbSample2'NS.put'' ⍝ One sample
     NS.EventArg←'LbSample2'
     NS←confIntAPI NS
     NS.Grid.Values←'SampSize'NS.put 150 ⍝ Sample Size
     NS.Grid.Values←'Mean'NS.put 0.08    ⍝ Prob of success (Mean)
     NS.EventArg←'Mean'
     NS←confIntAPI NS
     NS.Event←'Run'
     NS←confIntAPI NS
     _←display NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Variance ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'var'
     NS.Event←'Select'                  ⍝ Change to proportion
     NS←confIntAPI NS
     NS.Grid.Values←'Sdev'NS.put 1.5
     NS.EventArg←'Sdev'
     NS←confIntAPI NS
     NS.Event←'Run'                      ⍝ Change to variance
     NS←confIntAPI NS
     _←display NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Mean with DataSet
     9=⎕NC'#.D':{NS←⍵
         NS.Grid.Values←'Parameter'NS.put'mean'
         NS.Event←'Select'
         NS.EventArg←'Parameter'
         NS←confIntAPI NS
         NS.Grid.Values←'Sample'NS.put'D.Height'
         NS.EventArg←'Sample'
         NS←confIntAPI NS
         NS.Event←'Run'
         NS←confIntAPI NS
         _←display NS
              ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Group by Sex
         NS.Grid.Values←'LbSample2' 'Sample2'NS.put'splitBy' 'D.Sex'
         NS.Event←'Select'
         NS.EventArg←'LbSample2'
         NS←confIntAPI NS
         NS.Event←'Run'
         NS←confIntAPI NS
         _←display NS
               ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Splitby Sex
         NS.Grid.Values←'LbSample2' 'Sample2'NS.put'GroupBy' 'D.Sex'
         NS.Event←'Select'
         NS.EventArg←'LbSample2'
         NS←confIntAPI NS
         NS.Event←'Run'
         NS←confIntAPI NS
         _←display NS
               ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Splitby State
         NS.Levels←0.95
         NS.Grid.Values←'LbSample2' 'Sample2'NS.put'GroupBy' 'D.State'
         NS.Event←'Select'
         NS.EventArg←'LbSample2'
         NS←confIntAPI NS
         NS.Event←'Run'
         NS←confIntAPI NS
         _←display NS
     }NS
     
     
     
     
     
     
 }

∇ Z←confInt_Test;X;Y;N;K;B;C;D;R;I;T;M;S;A;CI;CIF
     ⍝ Compare R to TamStat
 ⎕IO←0 ⋄ ⎕ML←3
 Z←1
 D←16 22 24 29 31 35 38 57 61
 →(24 38≢0.8 median confInt D)/0
 D←295 3147 283 569 1141 788 1255 2038 978 548 1133 1641 959 816 955 1473 702 459 1844
 →(702 1255≢0.9 median confInt D)/0
 100 sum confInt D
 0.99 50 sum confInt D
 100 mean confInt D
 0.9 50 mean confInt D
 N←50+?1000
 K←50+?1000
 M S←0 1+?200 30
 X←M S normal randomVariable N
 Y←M S normal randomVariable K
 B←?N⍴2
 C←?K⍴2
 A←(?2)⊃0.9 0.99
 R←I←0
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←2 1⍴mean confInt X
     R,←mean confInt X Y
     R,←A mean confInt Y
     R,←A mean confInt Y X
     R,←proportion confInt B
     R,←A proportion confInt C
     R,←proportion confInt B C
     R,←A proportion confInt C B
     I+←1
 :Until I=2
     
 Z←(,T-R)+.*2   ⍝T=TamStat, R = R
 Z←'ConfInt Test:'Z
 #.TamStat.R_Available←0
 N←25+?100     ⍝ Population Size
 X←100×?N⍴0    ⍝ Data
 M←2⌈?N          ⍝ Sample Size
 X←X[M?N]        ⍝ Sample Data
 :If (0.95 mean confInt X)≢CI←mean confInt X ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If ((0.95 N mean confInt X)≢CIF←N mean confInt X) ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (~∧/CIF between CI) ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (0.95 median confInt X)≢CI←median confInt X ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (0.95 N median confInt X)≢CIF←N median confInt X ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (~∧/CIF between CI) ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (0.95 N sum confInt X)≢CI←N sum confInt X ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If ∨/CI between 0.9 N sum confInt X ⋄ 'Error at line'⎕LC ⋄ :EndIf
 Y←X<50
 :If (0.95 proportion confInt Y)≢CI←proportion confInt Y ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (0.95 N proportion confInt Y)≢CIF←N proportion confInt Y ⋄ 'Error at line'⎕LC ⋄ :EndIf
 :If (~∧/CIF between CI) ⋄ 'Error at line'⎕LC ⋄ :EndIf
 'Test Complete'
∇

∇ Z←criticalValue_test;I;P;R;T;PP;N;PR;DF;M;S;J
     ⍝ Compare TamStat (T) to R
 R←I←0
 PP←0.25 0.1 0.05 0.025 0.01 0.005
 N←1+?20
 P←?0
 DF←1+?30 30
 M S←?200 30
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←N P binomial criticalValue=0.25      ⍝ 0
     R,←N poisson criticalValue<0.1 0.25    ⍝ 1 2
     R,←(DF,50⌈+/DF)hyperGeometric critVal<0.1 0.25   ⍝3-4
     R,←normal criticalValue<PP             ⍝ 5-10
     R,←normal criticalValue<PP             ⍝ 11-16
     R,←1.5 exponential criticalValue≥0.25 0.5 0.75 0.9 ⍝ 17-20
     R,←M S normal criticalValue>0.25 0.4 0.8 0.12      ⍝ 21-24
     R,←DF[0]tDist criticalValue<PP                    ⍝ 25-30
     R,←DF[1]chiSquare criticalValue≤(1-PP),0.5,PP     ⍝ 31-43
     R,←DF fDist criticalValue<PP                      ⍝ 44-49
     R,←,normal criticalValue=PP                       ⍝ 50-61
     I+←1
 :Until I=2
     ⍝ 5↑P
 Z←(T-R)+.*2
 :If Z>1E¯9
     'Difference:',(J←{⍵⍳⌈/⍵}|T-R)⊃¨T R
     'Index'J
     
 :EndIf
 Z←'CriticalValueTest'Z
∇

∇ Z←density_test;I;P;R;T;N;PR;DF;M;S
     ⍝ Compare TamStat (T) to R
 R←I←0
 N←1+?20
 P←?0
 DF←1+?30 30
 M S←0 1+?200 30
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←N P binomial 5
     R,←N poisson 2 5
     R,←N uniform 1 2 3 4
     R,←normal ¯1.5 2 1.64 1.96
     R,←1.5 exponential 0.5 1 2 3
     R,←M S normal 25 50 100 150
     R,←DF[0]tDist 1 1.5 3
     R,←DF[1]chiSquare 2 3 5 7 8 10 15
     R,←DF fDist 0.5 1 1.5 2 3
     I+←1
 :Until I=2
 Z←(T-R)+.*2   ⍝T=TamStat, R = R
 Z←'Density Test'Z
∇

∇ Z←distribution_test;I;P;Q;R;T;N;PR;DF;M;S
     
     ⍝ Compare TamStat (T) to R
 ⎕IO←0 ⋄ ⎕ML←3
 R←I←0
 N←1+?20
 P←?0
 DF←1+?30 30
 M S←?200 30
 Q←0.1 0.05 0.01
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←N P binomial probability=⍳5
     R,←P geometric prob=N
     R,←3 P negativeBinomial prob=N
     R,←N poisson probability<2 5
     R,←N uniform probability>1 2 3 4
     R,←(DF,52)hyperGeometric prob≤1 2 3 4
     R,←normal probability<¯1.5 2 1.64 1.96
     R,←1.5 exponential probability≥0.5 1 2 3
     R,←M S normal probability>25 50 100 150
     R,←DF[0]tDist probability<1 1.5 3
     R,←DF[1]chiSquare probability≤2 3 5 7 8 10 15
     R,←1 chiSquare probability≤2 5 10 50 100
     R,←DF fDist probability<0.5 1 1.5 2 3
     R,←N 1000 weibull probability<200 500 1000
     R,←1000 N logNormal prob>500 1500 2500
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Critical Value ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     R←N P binomial critVal<Q
     R,←P geometric critVal<Q
     R,←3 P negativeBinomial critVal<Q
     R,←N poisson critVal<Q
     R,←N uniform critVal<Q
     R,←(DF,52)hyperGeometric critVal<Q
     R,←normal critVal<Q
     R,←1.5 exponential critVal<Q
     R,←M S normal critVal<Q
     R,←DF[0]tDist critVal<Q
     R,←DF[1]chiSquare critVal<Q
     R,←1 chiSquare critVal<Q
     R,←DF fDist critVal<Q
     R,←N 1000 weibull critVal<Q
     R,←150 N logNormal critVal<Q
     I+←1
 :Until I=2
 Z←↑(1-T÷R)+.*2   ⍝T=TamStat, R = R
 'Worst relative fit:',{⍵(⍳,⊢)⌈/⍵}(1-T÷R)*2
 Z←'Distribution Test  ',⍕Z
∇

∇ fDist_Test X;R;PP;I;DF1;DF2;CR;CT
      ⍝ Compare TamStat (T) to R
 R←I←0
 PP←0.25 0.1 0.05 0.025 0.01 0.005
 :For DF1 :In 1+⍳X
     :For DF2 :In 1+⍳X
         #.TamStat.R_Available←1   ⍝ Do it in R
         CR←DF1 DF2 fDist criticalValue<PP
         #.TamStat.R_Available←0
         :Trap 0 1000
             CT←DF1 DF2 fDist criticalValue<PP    ⍝ Do it in TamStat
         :Else
             CT←0
         :EndTrap
              ⍝:If 0.0001<(CR-CT)+.*2
         :If 0.005≤⌈/|CR-CT
             DF1 DF2,'R:' 'TamStat:',⊃CR CT
         :EndIf
     :EndFor
 :EndFor
∇

∇ Z←hypothesisAPI_Test1;⎕IO;⎕ML;NS;P;S;N;L2;NM;M;X;S1;HV;S2
     ⍝Test hypothesisAPI
     ⍝ 24 test cases
     ⍝
 ⎕IO←0 ⋄ ⎕ML←3
 NS←⎕NS''
 NS.Event←'Init'                 ⍝ Initialize
 NS←hypothesisAPI NS
 NS.UserSpace←#
 N←30 ⋄ M←65 ⋄ S←3 ⋄ Z←1
 :For P :In 'mean' 'proportion' 'variance'
     NS.GridValues←'Parameter'NS.put P
     :For S1 :In 'stats' 'D'
         :If S1≡'D'
             :If P≡'proportion'
                 NM←'D.Sex eq ''M'''
                 HV←0.5
             :Else
                 NM←'D.Height' ⋄ HV←65 ⋄ :EndIf
         :Else
             NM←'stats' ⋄ HV←65
             NS.GridValues'SampSize' 'Mean' 'Sdev'NS.put N M S
         :EndIf
         NS.GridValues←'Sample'NS.put NM
         :For L2 :In 'Hypothesized Value' 'Sample 2' 'splitBy' 'D'
             NS.GridValues←'LbSample2'NS.put L2
             :Select L2
             :Case 'Hypothesized Value' ⋄ S2←HV
             :Case 'Sample 2' ⋄ S2←'stats' ⋄ NS.Grid.Values←'SampSize2' 'Mean2' 'Sdev2'NS.put N M S+1
             :Case 'splitBy' ⋄ S2←'D.Sex'
             :Case 'D' ⋄ NS.Grid.Values←'LbSample2'NS.put'Sample 2' ⋄ S2←'D.Weight'
             :EndSelect
             NS.Sample2←S2
             NS.Event←'Select'
             NS.EventArg←'Sample2'
             NS←hypothesisAPI NS
             NS.Event←'Run'
             NS←hypothesisAPI NS
             NS.Expr
         :EndFor
     :EndFor
 :EndFor
 Z←0
∇

 hypothesisAPI_test←{
      ⍝Written by Steve Mansour 6/28/2019
      ⍝  Examples of how to use hypothesisAPI
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
         ⍝ #.D←import'E:\UofS\StudentSurvey.csv'
     #.D←importTest'StudentSurvey.csv'
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←hypothesisAPI NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test HO Mean with Data set ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
         ⍝NS.Grid.Values←'Sample'NS.put'D.Height'
         ⍝NS.Event←'Sample'
     NS←hypothesisAPI NS
     NS.Grid.Values←'Mean' 'Sdev'NS.put 67 3.5
     NS.Grid.Values←'Sample2'NS.put 69
     NS.EventArg←'Sample2'
     NS←hypothesisAPI NS
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test HO Mean with two Data sets ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'LbSample2'NS.put'Sample 2'
     NS.Event←'Select'
     NS.EventArg←'LbSample2'
     NS←hypothesisAPI NS
     NS.Grid.Values←'SampSize' 'Mean' 'Sdev'NS.put 90 69 4.1
     NS.Grid.Values←'SampSize2' 'Mean2' 'Sdev2'NS.put 80 67 3.5
     NS.EventArg←'SampSize2'
     NS←hypothesisAPI NS
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test H0 Proportion ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'proportion' ⍝
     NS.Event←'Select' ⋄ NS.EventArg←'Parameter'
     NS←hypothesisAPI NS
     NS.Grid.Values←'LbSample2'NS.put'Hypothesized Value'
     NS.EventArg←'LbSample2'          ⍝ Change to proportion
     NS←hypothesisAPI NS
     NS.Grid.Values←'Sample'NS.put'stats'
     NS.EventArg←'Sample'
     NS←hypothesisAPI NS
     NS.Grid.Values←'SampSize'NS.put 150
     NS.Grid.Values←'Mean'NS.put 0.1
     NS.Grid.Values←'Sample2'NS.put 0.09
     NS.EventArg←'Sample'
     NS←hypothesisAPI NS
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test H0 Variance with two data sets ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'variance'
     NS.Grid.Values←'LbSample2'NS.put'Sample 2'
     NS.Grid.Values←'Relation'NS.put'>'
     NS.Event←'Select'           ⍝ Change to variance
     NS.EventArg←'Parameter'
     NS←hypothesisAPI NS
     NS.Grid.Values←'SampSize' 'Sdev'NS.put 90 4.1
     NS.EventArg←'Sdev'
     NS←hypothesisAPI NS
     NS.Grid.Values←'SampSize2' 'Sdev2'NS.put 80 3.5
     NS.EventArg←'Sdev2'
     NS←hypothesisAPI NS
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
           ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test HO Mean with Data set ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'mean'
     NS.Event←'Select' ⋄ NS.EventArg←'Parameter'
     NS←hypothesisAPI NS
     NS.Grid.Values←'Sample'NS.put'D.Height'
     NS.Grid.Values←'LbSample2'NS.put'Hypothesized Value'
     NS.Event←'Select' ⋄ NS.EventArg←'Sample'
     NS←hypothesisAPI NS
     NS.Grid.Values←'Sample2'NS.put 68
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
           ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test H0 Proportion with Data Set ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Grid.Values←'Parameter'NS.put'proportion'
     NS.Event←'Select' ⋄ NS.EventArg←'Parameter'
     NS←hypothesisAPI NS
     NS.Grid.Values←'Sample'NS.put'D.Sex eq ''M'''
     NS.Grid.Values←'LbSample2'NS.put'Hypothesized Value'
     NS.Event←'Select' ⋄ NS.EventArg←'Sample'
     NS←hypothesisAPI NS
     NS.Grid.Values←'Sample2'NS.put 0.6
     NS.Event←'Run'
     NS←hypothesisAPI NS
     ⎕←NS.(Grid.Values Grid.Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Output
     
 }

∇ Z←hypothesis_Test;X;Y;N;K;B;C;D;R;I;T;M;S;A
     ⍝ Compare R to TamStat
 Z←1
 D←16 22 24 29 31 35 38 57 61
 →(24 38≢0.8 median confInt D)/0
 D←295 3147 283 569 1141 788 1255 2038 978 548 1133 1641 959 816 955 1473 702 459 1844
 →(702 1255≢0.9 median confInt D)/0
 N←50+?1000
 K←50+?1000
 M S←0 1+?200 30
 X←M S normal randomVariable N
 Y←M S normal randomVariable K
 B←?N⍴2
 C←?K⍴2
 A←(?2)⊃0.9 0.99
 R←I←0
 :Repeat
     #.TamStat.R_Available←I
     T←R
         ⍝ R←X independent Y
     R,←mean confInt X Y
     R,←A mean confInt Y
     R,←A mean confInt Y X
     R,←proportion confInt B
     R,←A proportion confInt C
     R,←proportion confInt B C
     R,←A proportion confInt C B
     I+←1
 :Until I=2
     
     
     
 Z←(,T-R)+.*2   ⍝T=TamStat, R = R
 Z←'ConfInt Test:'Z
∇

∇ Z←importTest W;⎕IO;⎕ML
 ⎕IO←0 ⋄ ⎕ML←3
         ⍝ _←⎕SE.UCMD'MySource←acre.Sourcefile #.TamStat.Test'
 ⎕SE.UCMD'MySource←acre.Sourcefile #.TamStat.Test'
     
 MySource←(1⍳⍨'APLSource'⍷↑MySource)↑↑MySource
 MySource←('/'⎕R'\\')MySource,'Data/'
 Z←import MySource,W
∇

∇ Z←matrix_test X;Y;I;J;T;R;D;L;V;M;N;U;⎕DIV
     
 X Y←2↑X
     ⍝ Compare TamStat (T) to R
 ⎕IO←0 ⋄ ⎕ML←3 ⋄ ⎕DIV←1
     
 :For N :In 1+⍳10
     M←?N N⍴↑X
     M+←Y×?N N⍴0
     M←(⍉+⊢)M-X÷2
     R←I←0
     :Repeat
         #.TamStat.R_Available←I
         T←R
         D←det M
         L←eigenValues M
         V←eigenVectors M
         J←⍒L
         R←D(L[J])(V[;J])
         I+←1
     :Until I=2
     U←∪⍕⍤1⊢↑⌽T÷R
        ⍝ ⍎(1<≢U)/' 2+'
     Z←(T-⍥(∊∘|)R)+.*2   ⍝T=TamStat, R = R
     'Rank 'N'Matrix; Squared  Diff = 'Z'Signs:'U
     
 :EndFor
     
 Z←'End Matrix Test'
∇

∇ Z←nonParametric_Test;R;T;I;D;NS;D1;M;N;J;X;S;Y;TTF
 ⎕IO←0 ⋄ ⎕ML←3
 J←0
 :Repeat
     R←I←0
     N←3+?8
     M←1+?N
     :Repeat
         #.TamStat.R_Available←I
         T←R ⋄ R←0
         R,←M N mannWhitneyU probability≤⍳5
         R,←M N mannWhitneyU criticalValue≥0.01 0.05 0.1
         I+←1
     :Until I=2
     M,N,(T-R)+.*2
     J+←1
 :Until J=10
 TTF←330 620 1870 2410 4620 6396 7822 8102 8309 12882 14419 16092 18384 20916 23812 25814
 NS←TTF median hypothesis<14400
     ⍝ NS.TestStatistic≠6
      ⍝ One population:
 D←?20⍴100
 NS←D median hypothesis eq 50
      ⍝NS.P<0.01 'Unusual pValue for one population'
 ⎕←report NS
 D1←?20⍴100
 NS←D median hypothesis eq D1
     ⍝ NS.P<0.01 'Unusual pValue for two populations'
 NS←D=wilcoxon D1
 ⎕←report NS
 #.TamStat.R_Available←0
      ⍝ Lillefors Test ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 M←1+?100 ⋄ S←?20
 X←M S normal randomVariable 100
 Y←(÷M)exponential randomVariable 100
 report normal goodnessOfFit=X
 report exponential goodnessOfFit=X
      ⍝ Kolmogorov Test ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 report M S normal goodnessOfFit=Y
 report(÷M)exponential goodnessOfFit=Y
      ⍝⍝ Smirnov Test ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 report X goodnessOfFit=Y
       ⍝⍝⍝⍝⍝⍝⍝
∇

∇ onSelectOperator
∇

 probabilityAPI_test←{
      ⍝Written by Steve Mansour 9/12/2020
      ⍝  Examples of how to use hypothesisAPI
         ⍝ D1←import'E:\UofS\StudentSurvey.csv'
     #.D1←importTest'StudentSurvey.csv'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←probabilityAPI NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Explicit Frequency Monadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
         ⍝NS.GridValues←'Sig' 'Dist' 'Op' 'Var' NS.put .05 'uniform' 'goodnessOfFit' 3
     NS.Table←4 2⍴'DE' 9 'NJ' 21 'NY' 28 'PA' 42
     NS.(Grid.Values←'SetA' 'SetB'put' ' 'NJ')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Expr
     ⎕←NS.Result
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Explicit Frequency Dyadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'SetA' 'Conj'put'NY' '∨')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Grid.(Values Attributes.Type)
     ⎕←NS.Expr
     ⎕←NS.Result
     ⎕←NS.(Venn[;⍳2]VennText)
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Explicit Contingency Dyadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.Table←3 3⍴'*' 'Male' 'Female' 'Suburban' 196 298 'Urban' 92 173
     NS.(Grid.Values←'SetA' 'SetB'put'Urban' 'Female')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
     NS.(Grid.Values←'Conj'put'∧')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
     NS.(Grid.Values←'Conj'put'|')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
     ⎕←NS.(Venn[;⍳2]VennText)
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Database Frequency Monadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'RowVar' 'SetA' 'Conj' 'SetB'put'D1.Major' ' ' '~' 'ACC')
     NS.Event←'Select'
     NS.EventArg←'RowVar'
     NS←probabilityAPI NS
     ⎕←NS.Table
     ⎕←NS.Result
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Database Frequency Dyadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'ColVar' 'SetA' 'Conj'put'D1.State' 'NY' '∧')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
     ⎕←NS.(Venn[;⍳2]VennText)
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Database Contingency Monadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'ColVar' 'SetA' 'Conj'put'D1.State' ' ' '⊢')
     NS.Event←'Select'
     NS.EventArg←'ColVar'
     NS←probabilityAPI NS
     ⎕←NS.Table
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Database Contingency Dyadic ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'Conj' 'SetB'put'∨' 'PA')
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
     ⎕←NS.(Venn[;⍳2]VennText)
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Independent ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'RtOp'put'independent')
     NS.Event←'Select'
     NS.EventArg←'RtOp'
     NS←probabilityAPI NS
     ⎕←NS.Grid.Values
     ⎕←NS.(Grid.Values←'SetA' 'SetB'put 0.3 0.2)
     NS.Event←'Select'
     NS.EventArg←'SetB'
     NS←probabilityAPI NS
     NS.Event←'Run'
     NS←probabilityAPI NS
     ⎕←NS.Result
 }

 probability_test←{
     ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Test rules of Probability ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     Z←0 ⋄ ⎕IO←0 ⋄ ⎕ML←3
     D1←import'E:\TamStat\StudentData.csv'
     State←frequency D1.State          ⍝ Frequency Distribution
     1≠((⊢prob State)'PA')+(~prob State)'PA':⎕LC
     ('NY'∨prob State⊢'PA')≠+/(⊢prob State)'PA' 'NY':⎕LC
     0≠'NY'(∧prob State)'PA':⎕LC
     0≠(⊢prob State)'TX':⎕LC
     1≠(~prob State)'TX':⎕LC
     0≠'PA'(|prob State)'NY':⎕LC
     ('PA'(<prob State)'NY')≠(⊢prob State)'NY':⎕LC
       ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     Table←frequency D1.Sex D1.Party    ⍝ Contingency Table
     M F D I R←⊢prob Table,¨'MFDIR'
     1≠D+I+R:⎕LC
     (~prob Table⊢'R')≠1-R:⎕LC       ⍝Not
     MR←'M'∧prob Table⊢'R'           ⍝And
     ('M'∨prob Table⊢'R')≠M+R-MR:⎕LC ⍝ Or
     ('M'|prob Table⊢'R')≠MR÷R:⎕LC   ⍝ Conditional
     1≠F+M:⎕LC
     1≠('M'∧prob Table⊢'D')+'M'⍲prob Table⊢'D':⎕LC
     1≠('F'∪prob Table⊢'I')+'F'⍱prob Table⊢'I':⎕LC
        ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Independent probabilities
     P Q←?0 0
     (P×Q)≠P∧prob ind Q:⎕LC
     (P+Q-P×Q)≠P∨prob ind Q:⎕LC
     P≠P|prob ind Q:⎕LC
     (1-P×Q)≠P⍲prob ind Q:⎕LC
     (1-P+Q-P×Q)≠P⍱prob ind Q:⎕LC
     (P=prob ind Q)≠(P∧prob ind Q)+P⍱prob ind Q:⎕LC
     (P≠prob ind Q)≠(P>prob ind Q)+P<prob ind Q:⎕LC
         ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     P←(∨prob D1.Family)/N←2?5
     P=+/N{⍵[⍵[;0]⍳⍺;1]}frequency D1.Family:⎕LC
     P←'M'(∨prob D1.Family D1.Sex)N←1⌈?5
     P≠N{(+/,⍵)÷⍨(⍵[⍺;]+⍥(+/)⍵[;1])-⍵[⍺;1]}1 1↓frequency D1.Family D1.Sex:⎕LC
     P←10.5(∨prob D1.Family D1.ShoeSize)N
     P≠N{(+/,⍵)÷⍨(⍵[⍺;]+⍥(+/)⍵[;11])-⍵[⍺;11]}1 1↓frequency D1.Family D1.ShoeSize:⎕LC
     'Probability Test:'Z
     
 }

∇ Z←randomVariable_test;I;P;B;Q;N;DF;M;S;f;K;g;R;T;⎕IO;⎕ML
     ⍝ Random Variable test comparing TamStat to R
 ⎕ML←3 ⋄ ⎕IO←0
 R←I←0
 N←1+?20
 P←?0
 DF←1+?30 30
 M S←0 1⌈?200 30
 f←mean,sdev,skewness,kurtosis
 K←10000
 :Repeat
     #.TamStat.R_Available←I
     T←R       ⍝ Q is TamStat, P is R
     R←4 1⍴f N P binomial randomVariable K
     R,←f N poisson randomVariable K
     R,←f N uniform randomVariable K
     R,←f normal randomVariable K
     R,←f 1.5 exponential randomVariable K
     R,←f M S normal randomVariable K
     R,←f DF[0]tDist randomVariable K
     R,←f DF[1]chiSquare randomVariable K
     R,←f DF fDist randomVariable K
     I+←1
 :Until I=2
 Q←I←0
 g←{⍺←0 1
     z←⍺ ⍺⍺ theoretical mean ⍵
     z,←⍺ ⍺⍺ theoretical sdev ⍵
     z,←⍺ ⍺⍺ theoretical skewness ⍵
     z,←⍺ ⍺⍺ theoretical kurtosis ⍵
     z
 }
     
     
 Q←4 0⍴0
 Q,←N P binomial g 0
 Q,←N poisson g 0
 Q,←(N+1)uniform g 0
 Q,←normal g 0
 Q,←1.5 exponential g 0
 Q,←M S normal g 0
 Q,←DF[0]tDist g 0
 Q,←DF[1]chiSquare g 0
 Q,←DF fDist g 0
 B←~Q∊⎕NULL(⌊/⍳0)
 Q←0@{⍵∊⎕NULL(⌊/⍳0)}Q
 T R←T R×⊂B
 Z←'TamStat' 'R'
 Z←Z,[¯0.5]sumSquares∘,¨T R-⊂Q
     
     
     
     
     
     
     
     
 Z←'RandomVariable Test:'Z
∇

∇ Y randomVariable_timing X;I;A;B;M;S;N;P;DF;⎕IO;_
      ⍝ Y - Number of Loops
      ⍝ X - Number of iterations per loop
      ⍝ 5 randomVariable 10000
 ⎕IO←1
 :If 0=⎕NC'Y' ⋄ Y←1 ⋄ :EndIf
 :For I :In ⍳Y
     N←?20
     A←N×?0
     B←A+N×?0
     P←?0
     DF←?30 30
     M S←?200 30
     _←M S normal randomVariable X
     _←M S(16808⌶)'Normal'X
     _←DF[1]chiSquare randomVariable X
     _←DF[1](16808⌶)'Chi Squared'X
     _←P exponential randomVariable X
     _←P(16808⌶)'Exponential'X
     _←N P binomial randomVariable X
     _←N P(16808⌶)'Binomial'X
     _←DF[2]tDist randomVariable X
     _←DF[2](16808⌶)'Student T'X
     _←DF fDist randomVariable X
     _←DF(16808⌶)'F'X
     _←N poisson randomVariable X
     _←N(16808⌶)'Poisson'X
     _←M S logNormal randomVariable X
     _←M S(16808⌶)'Log Normal'X
     _←A B beta randomVariable X
     _←A B(16808⌶)'Beta'X
     _←A B gamma randomVariable X
     _←A B(16808⌶)'Gamma'X
     _←A B weibull randomVariable X
     _←A B(16808⌶)'Weibull'X
 :EndFor
∇

∇ Z←regress_test X;⎕IO;⎕ML;NS;HW;PY;DB;R;MT;I;EX;MODEL;MM;ADS;CARS;I;D1;b;B;INT;X;E;X1;X2;Y;ADV;COST;REPS;WEIGHT;SALES
      ⍝Written by Steve Mansour    12/29/2022
      ⍝  Examples of how to use regress
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 ⎕IO←1 ⋄ ⎕ML←1
     
      ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialization ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
 D1←importTest'StudentSurvey.csv'
 MT←importTest'MissileTest.csv'
       ⍝   PP←importTest'Production_problems.csv'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ One-Way ANOVA Stats ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
        ⍝  NS.Table←3 4⍴'PA' 5 72 3.4 'NJ' 6 68 4.1 'NY' 5 69 3.7
 b←{⍵.B}
 B←⍬
     
 :For I :In 0 1
     #.TamStat.R_Available←I
     :For INT :In 0 1
     
         B,←b D1.Height regress INT D1.ShoeSize              ⍝ Simple Regression
         B,←b D1.Height regress INT,D1.(ShoeSize Weight)     ⍝ Multiple regression
         B,←b D1.Height regress INT,D1.(ShoeSize Weight)     ⍝     ... with no intercept
         B,←b D1.Height regress INT,⊂⍉↑D1.(ShoeSize Weight)  ⍝ Matrix
         B,←b D1.Weight⊥regress INT D1.ShoeSize              ⍝ Quadratic
         B,←b D1.Weight 3⊥regress INT D1.Height              ⍝ Cubic
         B,←b D1.Weight⊥regress INT D1.(ShoeSize Height)     ⍝ Multiple Quadratic Regression
         B,←b D1.Height regress INT D1.(Sex ShoeSize)        ⍝ Indicator variable (2 categories)
         B,←b D1.Height regress INT D1.(Party ShoeSize)      ⍝ More than two categories
         B,←b D1.Height regress INT D1.(Sex Party ShoeSize)  ⍝ Two indicator variables
         B,←b D1.Height×regress INT D1.ShoeSize              ⍝ y = a×b*c
         B,←b D1.Height*regress INT D1.ShoeSize              ⍝ y = a×b*c
         B,←b D1.Height⍟regress INT D1.ShoeSize
         B,←b D1.Height÷regress INT D1.ShoeSize
         B,←b MT.HitOrMiss≠regress MT.Speed
         B,←b'HitOrMiss'≠regress MT
         makeTransFn'Y←Height'('Int←',⍕INT)'X1←ShoeSize*2' 'X2←Sex eq ''M'''
         B,←b transform regress D1                           ⍝ Custom
     :EndFor
     
 :EndFor
 {⍵+.*2}-⌿2(0.5×≢B)⍴B
     
     
      ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Simple Regression
 ADS←1 3 2 1 3
 CARS←14 24 18 17 27
     ⍝ MM←regress CARS ADS
 MM←CARS regress ADS
 MM.f 2 3 4
 MM.f confInt 2
 MM.f predInt 1 2 3
 report MM
 MM.VIF
 MM.ConditionNumber
 NS←Create_Regress 25
 DB←NS.Database
 EX←⍕NS.Expressions
 R←I←0
 #.TamStat.R_Available←0
 ADV←1.2 2.6 2.2 3.2 2.9 1.5 2.7
 COST←1.2 9 4.5 3.2 13 0.6 1.8 2.7
 REPS←2 1 2 3 4 4 5 5 6 7 8 10 11
 SALES←2.1 3.6 6.2 10.4 22.8 35.6 57.1 83.5 109.4 128.6 196.8 280 462.3
 WEIGHT←450 20200 9060 3500 75600 175 800 2100
 report SALES⊥regress REPS
 NS←COST×regress WEIGHT
 report NS
 'Y←B0×X*B1:',NS.g 3000
     
     
     
 MODEL←⍳0
 :Repeat
     #.TamStat.R_Available←I
     MODEL,←leastSquares DB EX
     I+←1
 :Until I=2
 sumSquares-⌿↑MODEL.(∊B S E VIF ConditionNumber)
      ⍝⍝⍝⍝⍝⍝⍝⍝ Quadratic Regression
 #.TamStat.R_Available←0
 HW←importTest'Hardwood.csv'
 PY←importTest'ProcessYield.csv'
 MODEL←HW.Y⊥regress HW.X
 X E←(?15)0
 'One Var Quadratic:',(⍎MODEL.Equation)-Y←MODEL.g X
 0.9 MODEL.g confInt X
 Y X MODEL.S
 MODEL←PY.Yield⊥regress PY.(ReactionTime Temperature)
 I←?count PY.Yield
 X1 X2←I⊃¨PY.(ReactionTime Temperature)
 'Two Variable Quadratic:',(⍎MODEL.Equation)-Y←MODEL.g X1 X2
 MODEL.g predInt X1 X2
 Y,PY.Yield[I],MODEL.S
 Z←0
∇

 sampleSizeAPI_test←{
          ⍝∊ Written by Steve Mansour 6/2/2020
          ⍝ Examples of how to use sampleSize API
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Initialize ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ⎕IO←0 ⋄ ⎕ML←3
     NS←⎕NS''
     NS.Event←'Init'                 ⍝ Initialize
     NS.UserSpace←#
     NS←sampleSizeAPI NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝ Proportion  ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'Conf'put 0.9)
     NS.(Grid.Values←'MOE'put 0.04)
     NS.Event←'Run'
     NS←sampleSizeAPI NS
     ⎕←'Expr: ',NS.Expr
     ⎕←NS.Grid.Values
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Mean ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'Parameter'put'mean')
     NS.Event←'Select'
     NS.EventArg←'Parameter'
     NS←sampleSizeAPI NS
     NS.(Grid.Values←'Conf'put 0.95)
     NS.(Grid.Values←'MOE' 'Sdev'put 1 6)
     NS.Event←'Run'
     NS←sampleSizeAPI NS
     ⎕←'Expr: ',NS.Expr
     ⎕←NS.Grid.Values
         ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝  Total ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     NS.(Grid.Values←'Parameter'put'sum')
     NS.Event←'Select'
     NS.EventArg←'Parameter'
     NS←sampleSizeAPI NS
     NS.(Grid.Values←'Conf'put 0.9)
     NS.(Grid.Values←'MOE' 'Sdev'put 2000,sqrt 919)
     NS.(Grid.Values←'PopSize'put 286)
     NS.Event←'Run'
     NS←sampleSizeAPI NS
     ⎕←'Expr: ',NS.Expr
     ⎕←NS.Grid.Values
         ⍝⍝⍝⍝⍝⍝⍝⍝⍝ Proportion with finite sample Size
     NS.(Grid.Values←'Parameter'put'proportion')
     NS.Event←'Select'
     NS.EventArg←'Parameter'
     NS←sampleSizeAPI NS
     NS.(Grid.Values←'Conf'put 0.95)
     NS.(Grid.Values←'MOE' 'Sdev'put 0.05,0.2)
     NS.(Grid.Values←'PopSize'put 1000)
     NS.Event←'Run'
     NS←sampleSizeAPI NS
     ⎕←'Expr: ',NS.Expr
     ⎕←NS.Grid.Values
     NS
 }

∇ Z←summaryTest;X;Y;N;R;I;T;M;S
     ⍝ Compare R to TamStat
 N←50+?1000
 M S←0 1+?200 30
 X←M S normal randomVariable N
 Y←M S normal randomVariable N
 R←I←0
      ⍝0=0 1 2 3 4 cov 4 1 0 1 4
      ⍝0=0 1 2 3 4 corr 4 1 0 1 4
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←(mean,median,mode)X
     R,←(sdev,var)X
     R,←X(cov,corr)Y
     I+←1
 :Until I=2
 Z←(T-R)+.*2   ⍝T=TamStat, R = R
 Z←'Summary Test'Z
∇

∇ Z←table_Test;P;N;L;R;I;T
 R←I←0
 :Repeat
     #.TamStat.R_Available←I
     T←R
     R←⊂normal prob<table(⍳3)∘.+⍳10
     P←0.1 0.05 0.025 0.01 0.005
     N←1+⍳30
     R,←⊂(N tDist criticalValue<table P)
     R,←⊂N chiSquare criticalValue<table(⌽P),1-P
     R,←⊂N N fDist criticalValue<table 0.05
     P←0.01×1+⍳9
     R,←⊂N P binomial prob=table 0,N
     L←10×0.2×1+⍳10
     R,←⊂L poisson prob=table 0,N
     I+←1
 :Until I=2
 Z←{(,⍵)+.*2}¨(T-R)
      ⍝Z←T≡¨R
 Z←'Table Test'Z
∇

 MS_Test←{
⍝ ∇ Test mean and standard deviation for a random sample
⍝ ⍺ Parameter List
⍝ ⍺⍺ Distribution
⍝ ⍵ Sample Size
     X←⍺ ⍺⍺ randomVariable ⍵   ⍝ Generate sample
     XBAR←mean X               ⍝ Sample mean
     S2←variance X             ⍝ Sample variance
     M←⍺ ⍺⍺ theoretical mean 0 ⍝ Population mean
     V←⍺ ⍺⍺ theoretical var 0  ⍝ Population variance
     Z←(XBAR-M)÷sqrt V÷⍵       ⍝ Z test Statistic
     X2←(S2×⍵-1)÷V             ⍝ X2 test statistic
     P1←normal prob outside|Z  ⍝ p-Value for mean
     P2←(⍵-1)chiSquare prob>X2 ⍝
     P2←2×⌊/P2,1-P2            ⍝ p-Value for variance
     P1,P2}


:EndNamespace 
