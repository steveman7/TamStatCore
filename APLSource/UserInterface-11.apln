:Namespace UserInterface
(⎕IO ⎕ML ⎕WX)←1 1 3

 ActiveGraph←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←⍵
     dist←f.syntax.d.dist.(SelItems/Items)
     c←'0'=dist{↑⍵[⍵[;0]⍳⍺;⍵[0;]⍳⊂'DISCRETE']}f.DistTable  ⍝ Continuous?
     op←f.syntax.d.oper.SelItems
     f.mb.mg.Active←b←∧/(c∨op[1]),~op[2 3]
     b}

 AddBayesRow←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     S←30 0
     f.Size+←S
     f.xg.Posn+←S
     f.p.Posn+←S
     f.syntax.Size+←S
     f.syntax.d.Size+←S
     1
 }

 AddX←{
          ⍝0::1
     g e r←⍵
     g.CellTypes←(⍴g.Values)⍴g.CellTypes
     1
 }

 BuildAndRun←{
      ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
      ⍝∇ Build TamStat Expression and run it
      ⍝∊ User Interface
      ⍝⍵ Distribution Wizard Form
      ⍝← 1
      ⍝⍕ BuildAndRun NS
     ⎕ML←3 ⋄ ⎕IO←0                                  ⍝ Set system variables
     f←getform ⍵                                    ⍝ Get the form
     b←'multinomial'≡↑f.syntax.d.Values[0;1]        ⍝ Multinomial Distribution?
     p←⍕b{⍺∧0=↑0⍴↑⍵:,'(',(⍉⍵[;0 1]),')'             ⍝ Multinomial and numeric
         ⍺:(1⌽'''''',1↓∊',',¨⍵[;0])('(',⍵[;1],')')  ⍝ Multinomial and character
         ⍵[;1]}f.params.g.Values                    ⍝ Other
     V←f.syntax.d.Values                            ⍝ Get syntax components
     f.syntax.d.Values←V
     ex←⍕p,{0=↑0⍴3⊃⍵:⍵ ⋄                            ⍝ If right arg numeric
         ∧/↑⎕VFI 3⊃⍵:⍵
         z←(3↑⍵),'''',(3⊃⍵),''''                    ⍝ Else surround last item with quotes
         z[2]←'eq' 'ne' 'in'['=≠'⍳↑2⊃⍵]             ⍝ Replace = ≠ ∊ with eq ne in
         z}f.syntax.d.Values[;1]
     f.xg.expr.Text←deleteExcessBlanks('-'⎕R'¯')ex  ⍝ Use high minus, get rid of blanks
     f.xg.result.Text←⍕z←exErr f.xg.expr.Text       ⍝ Trap error in expression
     z}

 BuildAnovaExpr←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     d←f.syntax.d
     g←f.params.g
     ⍺.Grid.Values←d.Values
     ⍺.Event←'Run'
     ⍺.Table←g.Values
     NS←anovaAPI ⍺
     g.Values←NS.Table
     g.TitleHeight←30××≡NS.ColTitles2
     f.xg.expr.Value←NS.Expr
     f.gr.result.Text←NS.Output
     1}

 BuildExpr←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     c←~(⊂'confInt')∊f.syntax.d.Values
     V←f.syntax.d.Values
     ⍺.UserSpace←'#'
     ⍺.Event←'Run'
     NS←c{⍺:hypothesisAPI ⍵
         ⍵.Levels←0~⍨⍵.get'Level'∘,¨'1234'
         confIntAPI ⍵}⍺
     f.xg.expr.Value←NS.Expr
     RPT←⍺.Output
     RPT←c{1=⍴⍴⍵:⍵
         ⍺↓⍵}RPT            ⍝ Remove first row if hypothesis
     f.gr.result.Text←RPT
     1
 }

 BuildMultinomial←{
     ⎕PATH←'#.GUI'
     ⎕IO←0 ⋄ ⎕ML←3
          ⍝G←buildMultiNomial ''
     f←getform ⍵
     p←#.UserInterface.fmF.params.g
     lab←p AddLabel''
     num←p AddNumField''
     spi←p AddSpinner''
     spi.Limits←1 1000
     p.Input←'lab' 'num' 'spi' 'edt'
     p.BCol←¯16 0 0 0
     p.CellTypes←4 3⍴2 2 1
     p.Values←⍉⊃(1+⍳4)(4/0.25)(4⍴' ')
     p.ColTitles←'Value' 'Probability' 'Description'
     p.AutoExpand←1 0
     1
 }

 BuildRex←{
      ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
      ⍝∇ Build Regression Expression
      ⍝∊ User Interface
      ⍝⍵ Distribution Wizard Form
      ⍝← 1
      ⍝⍕ BuildRex NS
      ⍝_←ShowStats ⍵
     ⎕IO←0 ⋄ ⎕ML←3                              ⍝ Set system variables
     f←getform ⍵                               ⍝ Get the form
     V←f.syntax.d.Values                       ⍝ Get input from user
     y←↑V[0;1]
     ns←{'.'∊⍵:↑⌽{((⍵≠' ')⊂⍵)}(⍵⍳'.')↑⍵        ⍝ Get namespace
         '#'}y                                 ⍝ Use root if no dot
     q←''''
     g←(ns,'\.')∘{w←(⍺ ⎕R'')⍵
         ∧/w∊⎕A,⎕D,iotag'z':w
         b←#.TamStat.SessionForm.mb.mst.msy.Standard.Checked
         ~b:'(',w,')'                          ⍝
         w←(q ⎕R(q,q))('\x{5E}'⎕R'*')('/'⎕R'÷')('\x{2A}'⎕R'×')w
         '(',w,')'}                            ⍝
     int←V[1;0]                                ⍝ Include intercept?
     X←⌿/2↓V[;0 1]                             ⍝ Independent variables
     ex←1⌽q,q,deleteExcessBlanks⍕g¨(⊂y),X
         ⍝ ex←deleteExcessBlanks⍕int'regress'ns ex   ⍝ Build expression
     ex←deleteExcessBlanks⍕int'leastSquares 'ns ex   ⍝ Build expression
     NL←(⊂y),X~¨⊂'()'
     ex←(3⊃,f.p.Values),' <- ',ex                ⍝ Write out to form
     f.xg.expr.Text←ex
     D←exErr ex                                 ⍝
     2=⎕NC'D':↑0,f.xg.eq.Text←D
     I←0,1↓V[;0]                               ⍝
     V[;2 3 4 5]←I⍀⍉⊃D.(B SB T(P⌈0.00001))     ⍝ Populate coefficient table
     f.syntax.d.Values←V                       ⍝
     f.p.Values[0;0 1 2]←D.(S RSq RSqAdj)     ⍝ Regression outputs
   ⍝ A←1 1↓D.AnovaTable                        ⍝ Remove row, column headers 
     A←1↓D.AnovaTable
     A[0;4]⌈←0.00001                           ⍝ Force positive p-value(s)
       A[0;4]⌈←0.00001                           ⍝ Force positive p-value(s)
   ⍝  B←A≠⍥≡f.ANOVA.a.Values                    ⍝ Equal Rows?  
   ⍝  H←'Total' 'Regression' 'Error' 
   ⍝  H,←B/'   Lack of Fit'  '  Pure Error'   
   ⍝  f.ANOVA.a.Values←(1⌽H),A           
   ⍝f.ANOVA.a.Values[;1+⍳5]←A                 ⍝ Populate ANOVA table     
     f.ANOVA.a.Values←A
     f.xg.eq.Text←D.Equation
     1}

 BuildSampSizeEx←{
     f←getform ⍵
     ⎕IO←0 ⋄ ⎕ML←3
          ⍝V←f.syntax.d.Values
     ⍺.Grid.Values←f.syntax.d.Values
     ⍺.UserSpace←#
     ⍺.Event←'Run'
     NS←sampleSizeAPI ⍺
     f.syntax.d.Values←NS.Grid.Values
     f.xg.expr.Value←NS.Expr
     1
 }

 CalcProp←{
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     g←ob.##                    ⍝ Get grid object
     i j←g.CurCell              ⍝ Find current cell
     k←i{'confInt'≢↑⍵:,⍺+1       ⍝ If hypothesis, next line
         ⍺+(⍵[1 2]∊⊂'stats')/1 2
     }g.Values[2 3 4;1]         ⍝ if confint, chose linkes
     g.Values[k;j]←j{
         ⍺=4:⍵[;1]÷⍵[;0]      ⍝ Calc proportion
         ⍺=3:⌊0.5+⍵[;0]×⍵[;2] ⍝ Calc events
         ⌊0.5+⍵[;1]÷⍵[;2]     ⍝ Calc sample Size
     }g.Values[k;2 3 4]
     1
 }

∇ z←CalcSummaryStats X;f;d;b;fn;v;g;ff;sf;dd;u;gg
      ⍝ Get Parameter List from Distribution
 ⎕IO←0 ⋄ ⎕ML←3
 f←##.GUI.getform X
 d←f.st.d
 sf←¯1↓d.Input
 b←¯2↓,⍉d.Values                ⍝ Get State
 fn←b/sf.Caption                ⍝ Get Functions
 fn,←d.Values[2 3;4]            ⍝ Include user defined functions
 fn←(deleteExcessBlanks¨fn)~⊂''
 v←f.st.exp.(↑SelItems/Items)   ⍝ Variable
 :If 2=#.⎕NC v                  ⍝ If variable exists
     g←f.st.grp.(↑SelItems/Items)   ⍝ Grouping Variable
     ff←⍎' '⎕R'∘'⊣∊',',¨fn          ⍝ Create a train
     dd←⍎'#.',v                     ⍝ Get raw data
     :If g∧.=' '
         u←fn,':',⍪ff dd
         u←⍪('Variable: ',v)u
         f.gr.result.Text←⍕u
     :Else
         gg←toNestedVector⍎'#.',g   ⍝ Get grouping variable
         u←dd ff groupBy gg         ⍝ Grouping function
         u←((⊂'Group'),fn)⍪u
         u←u⍪(⊂'Total'),,ff dd      ⍝ Include totals
         f.gr.result.Text←⍕u
     :EndIf
 :Else
     f.gr.result.Text←'Value Error'
 :EndIf
∇

 DisplayGraph←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     V←,f.syn.g.Values
     g←{⍵∧.=' ':''
         ∧/⍵∊⎕A,⎕D,'.',iotag'z':,⍵
         '(',⍵,')'}
     V[2 3]←g¨V[2 3]
     V←{(0≡↑⍵)↓⍵}V[0 1],'show',V[2 3]
     ex←deleteExcessBlanks,⍕V
     f.xg.expr.Text←ex
     f.gr.result.Text←exErr ex
     1
 }

 GetCategories←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     d←f.syntax.d                            ⍝ Get grid object
     b←d.Values[1;1]≢⊂'normal'               ⍝ Explicit categories?
     f.params.g.Values←b⌿f.params.g.Values   ⍝ If normal remove data
     ~b:0                                  ⍝ Exit
     V←d.Values[;1]
     'summary'≡↑V[3]:buildMultinomial ⍵
     ' '∧.=3⊃V:0
     ff←0,⍨frequency⍎'#.(',(3⊃V),')'
     f.params.g.Values←ff
     f.params.g.CellTypes←(⍴ff)⍴1 2 3
     f.params.g.Active←1
     1}

 GetValueD←{
     ⎕IO←0 ⋄ ⎕ML←3
     F←##.GUI.getform ⍵
     R←1--/F.gr.SF.TB.Limits
     V←F.syntax.d.Values
     rel←V[2;1]                ⍝ Relation
     B←⍎⍕(¯1+⍳R),rel F.gr.SF.TB.Thumb
     V[3;1]←F.gr.SF.TB.Thumb
     F.syntax.d.Values←V
     F.gr.SF.R1.FStyle←0
     F.gr.SF.R1.FillCol←(195 195 195)(0 127 0)[B]
     _←BuildAndRun ⍵
     1
 }

∇ GridNames
∇

∇ HELP X;∆IN;∆OUT;F;vcat;∆D;str;i
 ⎕IO←0 ⋄ ⎕ML←3
 F←getform X
 str←' ',F.in.Text~' '
 i←1⍳⍨∨/str⍷' ',#.Util.Syntax
 F.in.Text←(#.Util.Syntax⍪30↑'No Help Available')[i;]
∇

 MakeDistributionTable←{
      ⍝ Make Parameter Table
     ⎕ML←3 ⋄ ⎕IO←0
     inf←⍕2*31
     dx←⍕2*-31
     t←''
     HDRS←'DISTRIBUTION     DISCRETE  LOWER UPPER SYMMETRIC DESCRIPTION                                          '
     POSN←'---------------- --------- ----- ----- --------- -----------------------------------------------------'
     t,←'⋄ uniform          1         1     n     1         Discrete Uniform                                     '
     t,←'⋄ binomial         1         0     n     0.5       Number of successes in n trials'
     t,←'⋄ geometric        1         1     inf   0         Number of trials until first success'
     t,←'⋄ poisson          1         0     inf   0         Number of occurrences in an interval of size lambda'
     t,←'⋄ negativeBinomial 1         1     inf   0         Number of trials until the nth success'
     t,←'⋄ hyperGeometric   1         0     N     1         Finite Population sampling without replacement'
     t,←'⋄ mannWhitneyU     1         0     inf   0         Mann-Whitney U'
     t,←'⋄ multinomial      1         n           0         Custom defined distribution'
     t,←'⋄ normal           0         -inf  inf   1         Gaussian distribution'
     t,←'⋄ exponential      0         0     inf   0         Interarrival or failure times'
     t,←'⋄ rectangular      0         a     b     1         Continuous Uniform'
     t,←'⋄ triangular       0         a     b     0.5       Smallest, most likely and largest values'
     t,←'⋄ chiSquare        0         0     inf   0         Distribution of sample variance'
     t,←'⋄ tDist            0         -inf  inf   1         Distribution of sample mean when variance is unknown'
     t,←'⋄ fDist            0         0     inf   0         Distribution of ratio of sample variances'
     t,←'⋄ gamma            0         0     inf   0         Gamma Distribution'
     t,←'⋄ beta             0         a     inf   0.5       Beta Distribution'
     t,←'⋄ weibull          0         dx    inf   0         Weibull Distribution'
     t,←'⋄ logNormal        0         dx    inf   0         Lognormal Distribution'
     t,←'⋄ rayleigh         0         0     inf   0         Rayleigh Distribution'
     t,←'⋄ kolmogorov       0         0     inf   0         Kolmogorov-Smirnov Distribution'
     T←0 1↓{⊃(⍵≠'⋄')⊂⍵}t
     B←POSN='-'
     N←(B⊂HDRS)~¨' '
     deleteExcessBlanks¨N⍪B⊂T
 }

 MakeParameterTable←{
      ⍝ Make Parameter Table - Updated 1/23
     ⎕IO←0 ⋄ ⎕ML←3
     inf←⍕2*31
     dx←⍕2*-31
     t←''
     HDRS←'DISTRIBUTION     PARAMETER LOWER UPPER INTEGER DEFAULT DESCRIPTION                          '
     POSN←'---------------- --------- ----- ----- ------- ------- -------------------------------------'
     t,←'⋄ uniform          a         -inf  b     1         1     Lower Bound                          '
     t,←'⋄ uniform          b         a     inf   1         5     Upper Bound                          '
     t,←'⋄ binomial         n         1     inf   1         1     Sample Size'
     t,←'⋄ binomial         p         0     1     0         0.5   Probability of success'
     t,←'⋄ geometric        p         0     1     0         0.5   Probability of success'
     t,←'⋄ poisson          lambda    0     inf   0         5     mean'
     t,←'⋄ negativeBinomial n         1     inf   1         1     Number of successes'
     t,←'⋄ negativeBinomial p         0     1     0         0.5   Probability of success'
     t,←'⋄ hyperGeometric   m         1     N     1        13     successes in population'
     t,←'⋄ hyperGeometric   n         1     N     1         5     Sample Size'
     t,←'⋄ hyperGeometric   N         m     inf   1        52     Population Size'
     t,←'⋄ mannWhitneyU     M         1     10    1         5     Items in Group 1'
     t,←'⋄ mannWhitneyU     N         1     10    1         5     Items in Group 2'
     t,←'⋄ multinomial      Values    0     inf   0         0     Values'
     t,←'⋄ multinomial      p         0     1     0         0     Probabilities'
     t,←'⋄ normal           mu        -inf  inf   0         0     mean'
     t,←'⋄ normal           sigma     dx    inf   0         1     standard deviation'
     t,←'⋄ exponential      lambda    dx    inf   0         1     failure rate'
     t,←'⋄ rectangular      a         -inf  b     0         0     Lower bound'
     t,←'⋄ rectangular      b         a     inf   0         1     Upper bound'
     t,←'⋄ triangular       a         inf   m     0         0     Lower bound'
     t,←'⋄ triangular       m         a     b     0         1     Mode'
     t,←'⋄ triangular       b         m     inf   0         2     Upper bound'
     t,←'⋄ chiSquare        df        1     inf   1         5     Degrees of Freedom'
     t,←'⋄ tDist            df        1     inf   1        10     Degrees of Freedom'
     t,←'⋄ fDist            df1       1     inf   1         5     Degrees of Freedom in Numerator'
     t,←'⋄ fDist            df2       1     inf   1         5     Degrees of Freedom in Denominator'
     t,←'⋄ gamma            k         dx    inf   0         1     Shape'
     t,←'⋄ gamma            theta     dx    inf   0         1     Scale'
     t,←'⋄ beta             a         dx    inf   0         1     Shape'
     t,←'⋄ beta             b         dx    inf   0         1     Shape'
     t,←'⋄ weibull          m         dx    inf   0         1     Shape'
     t,←'⋄ weibull          k         dx    inf   0         1     Scale'
     t,←'⋄ logNormal        T50       dx    inf   0       100     Median'
     t,←'⋄ logNormal        sigma     dx    inf   0         1     Shape'
     t,←'⋄ rayleigh         sigma     dx    inf   0         1     Sigma'
     T←0 1↓{⊃(⍵≠'⋄')⊂⍵}t
     B←POSN='-'
     N←(B⊂HDRS)~¨' '
     T B N
 }

∇ Z←NS OnChangeNum X;S;f;ob;d;r;txt;b;Y;sf;i
         ⍝ Get Parameter List from Distribution
 ⎕IO←0 ⋄ ⎕ML←3
 f←##.GUI.getform X
 i←f.syntax.d.CurCell
 2+
 ob←↑X
 d←f.syntax.d
 S←('Sample2'≡(⊂d.CurCell)⊃NS.GridNames)/'2'
 NS.GridValues←('Sample',S)NS.put ob.Text
 NS.Event←'Select'
 NS←hypothesisAPI NS
     
 d.Values←NS.GridValues
     ⍝ d.CellTypes←' TEPRLNXSQD'⍳NS.GridTypes
 d.CellTypes←' TQPDELNXSnxsqR'⍳NS.GridTypes
∇

 OnChangeTable←{
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     ⍺.Table←ob.##.Values
     ⍺.Event←'Select'
     ⍺.EventArg←'Var'
     f←getform ⍵
     NS←probabilityAPI ⍺
     ob.##.Values←NS.Table
        ⍝  d←f.syntax.d
 }

 OnChecked←{
          ⍝_←ShowStats ⍵
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     B←⍵[0].State
     r←↑f.syntax.d.CurCell
     C←f.syntax.d.CellTypes
     C[r;1+⍳5]←B⊃(5/3)(2 3 3 3 3)
     f.syntax.d.CellTypes←C
     f.syntax.d.Values[r;0]←B
     r≠1:1
     f.syntax.d.Values[1;1]←B
     f.syntax.d.CellTypes[1;1]←3
 }

 OnDropDown←{
         ⍝ Put Items into Grid Combos
         ⍝ Written by Steve Mansour
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
     ⍺.EventArg←↑d.CurCell⌷⍺.Grid.Names
     TI←{0::'' ⋄ ⊂⍵.TopItem}⍺
     I←TI,(↑d.CurCell⌷⍺.Grid.Attributes).Items
     2=≡I:↑1,ob.Items←I
     D←1 variables ⍺.UserSpace
     I='A':↑1,ob.Items←TI,D
     TY←⎕DR¨U←⍺.UserSpace∘⍎¨D
     NUM←~TY∊80 160 320 326         ⍝ Numeric Data
     I='X':↑ob.Items←TI,NUM/D
     I='F':↑ob.Items←TI,(F←0≤⌊/¨NUM/U)/NUM/D
     I='P':↑ob.Items←TI,(P←1≥⌈F/NUM/U)/NUM/D
     'Nonce Error'
 }

 OnSelectCategory←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
         ⍝ 'MouseDown'≡1⊃⍵:ob.Items←⍺.Grid.Attributes[⊂d.CurCell].Items
     'MouseDown'≡1⊃⍵:ob.Items←{~∨/,'TopItem'⍷⍵.⎕NL 2:⍵.Items      ⍝ Include [None] for monadic?
         ⍵.Items,⍨⊂⍵.TopItem}⍺.Grid.Attributes[⊂d.CurCell]
     g←f.params.g
     NM←↑d.CurCell⌷⍺.Grid.Names
     ⍺.Grid.Values←NM ⍺.put ob.(SelItems/Items)
     ⍺.Event←'Select'
     ⍺.EventArg←NM
     ⍺.Table←f.params.g.Values
     NS←probabilityAPI ⍺
     d.Values←NS.Grid.Values
     d.CellTypes←' TNED'⍳NS.Grid.Attributes.Type
     d.CellTypes[3 5;1]←5 6  ⍝ Conjunction , rtop
     g.Values←⍺.Table
     1}

 OnSelectChart←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     d←⍵[0].(SelItems/Items)~' '
     V1←toNestedVector'pieChart,dotPlot,histogram' ⍝Only one variable
     V2←toNestedVector'histogram,stemAndLeaf,frequency,boxPlot,pieChart,barChart`' ⍝ Width/Start
     f.syn.g.Values[0;0]←d≡,⊂'dotPlot'
     f.syn.g.Values[0;1]←d
     f.syn.g.CellTypes[0;3]←(d∊V1)⊃3 4
     f.syn.g.Values[0;3]←' '
     f.syn.g.ColTitles[0]←⊂(d∊V2,⊂'dotPlot')/('boxPlot'≡↑d)⊃'#Bins' 'Start'
     f.syn.g.ColTitles[0]←⊂('boxPlot'≡↑d)⊃'Bins' 'Start'
     'frequency'≢↑f.syn.g.Values[0;1]:1
     0=⍴↑f.syn.g.Values[0;2]:1
     ~80 326∊⍨⎕DR⍎'#.',↑f.syn.g.Values[0;2]:1
     f.syn.g.ColTitles[0]←⊂'Table'
     1
 }

 OnSelectChiSqData←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     g←f.params.g
     NM←d.CurCell⌷⍺.Grid.Names
     ⍺.Grid.Values←d.Values
     NM←d.CurCell⌷⍺.Grid.Names                    ⍝ I shouldn't have to do this
     ⍺.Grid.Values←NM ⍺.put↑ob.(SelItems/Items)   ⍝ I shouldn't have to do this
     ⍺.Event←'Select'
     ⍺.EventArg←'Var'
     NS←chiSquareAPI ⍺
     d.Values←⍺.Grid.Values
     d.CellTypes←' TQNED'⍳NS.Grid.Attributes.Type
     g.Values←⍺.Table
     i←'independent'≡⍺.get'Op'
     d.CellTypes[2;1]←7     ⍝ Op
     d.CellTypes[1;1]←i⊃6 4 ⍝ Variable 1
     d.CellTypes[3;3]←5*(~i)∧'frequency'≡NS.get'Var'
     ~i:g.CellTypes←' TNXAQ'⍳NS.CellTypes
     c←2*~(⊂'frequency')∊⍺.Grid.Values
     g.CellTypes←' TNXAQ'⍳NS.CellTypes
     g.CellWidths←(¯50+1⊃g.Size)÷1⊃⍴g.Values
     1}

 OnSelectChiSqTest←{
         ⍝ Show proper fields for operator
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     b←ob.SelItems              ⍝ b= 1 0 - gof, b = 0 1 ind
     f←##.GUI.getform ⍵
     grid←f.syntax.d
     ⍺.Grid.Values←'Op'⍺.put ob.Text
     ⍺.Event←'Select'
     ⍺.EventArg←'Op'
     NS←chiSquareAPI ⍺
     grid.Values←NS.Grid.Values
     grid.CellTypes←' TQNEd'⍳NS.Grid.Attributes.Type
     g←f.params.g
     g.Values←NS.Table
     i←ob.Text≡'independent'
     grid.CellTypes[2;1]←7     ⍝ Op
     grid.CellTypes[1;1]←i⊃6 4 ⍝ Variable 1
     grid.CellTypes[3;3]←i⊃5 1 ⍝ Type
     g.TitleHeight←30×~i
         ⍝ g.CellTypes←' TIXAQ'⍳NS.CellTypes
     g.CellTypes←' TIXAQ'⍳NS.CellTypes
 }

 OnSelectConj←{
         ⍝ Var settings for Anova
         ⍝ Written by Steve Mansour
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
     ⍺.EventArg←↑⍺.Grid.Names[⊂d.CurCell]
     ⍺.Grid.Values←⍺.EventArg ⍺.put↑ob.(SelItems/Items)
     
         ⍝ 'MouseDown'≡1⊃⍵:{ob.Items←⍺.Grid.Attributes[⊂d.CurCell].Items
     'MouseDown'≡1⊃⍵:⍺{ob.Items←⍺.Grid.Attributes[⍵].Items
         ob.SelItems←ob.Items∊d.Values[⍵]}⊂d.CurCell
     NS←probabilityAPI ⍺
     d.Values←NS.Grid.Values
     1
 }

∇ Z←NS OnSelectData X;S;f;ob;d;r;txt;b;Y;sf
         ⍝ Get Parameter List from Distribution
 ⎕IO←0 ⋄ ⎕ML←3
 f←##.GUI.getform X
 ob←↑X
 d←f.syntax.d
 S←('Sample2'≡(⊂d.CurCell)⊃NS.GridNames)/'2'
 NS.GridValues←('Sample',S)NS.put ob.Text
 NS.Event←'Select'
 NS←hypothesisAPI NS
 d.Values←NS.GridValues
 d.CellTypes←' TQPDELNXSnxsqR'⍳NS.GridTypes
∇

∇ OnSelectDist
∇

 OnSelectDistribution←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     p←f.params.g
     p.CellWidths←150 200 250
     p.ColTitles←'Parameter' 'Value' 'Description'
     d←↑⍵[0].(SelItems/Items)~' '
     _←##.GUI.clear p
     d≡'':0
     d≡'multinomial':buildMultinomial f
     t B N←MakeParameterTable''
     dp←B⊂(0⌷[1]d⍷t[;⍳⍴d])⌿t    ⍝ Select parameters for distribution
     nn←dp[;N⍳'PARAMETER' 'DEFAULT' 'DESCRIPTION']
        ⍝  nn[;1]←⍎¨nn[;1]
     ⍝   nn[;2]←##.Util.deleteExcessBlanks¨nn[;2]
     nn←{0=≢⍵:⍵
         nn←⍵ ⋄ nn[;1]←⍎¨nn[;1]
         nn[;2]←##.Util.deleteExcessBlanks¨nn[;2]
         nn}nn
     p.Values←nn
     lab←p AddLabel''
     num←p AddNumField''
     spi←p AddSpinner''
     spi.Limits←1 1000
     p.Input←'lab' 'num' 'spi' 'edt'
     p.CellTypes←(⍴nn)⍴1 2 1
     p.BCol←(⍴nn)⍴¯16 0 0 0
     0=≢dp:0
     p.CellTypes[;1]+←⍎∊dp[;N⍳⊂'INTEGER']
          ⍝ActiveGraph f
 }

 OnSelectDistributionTable←{
         ⍝ Set parameters for distribution
     ⎕ML←3 ⋄ ⎕IO←0
     f←##.GUI.getform ⍵
     V←f.p.Values
     b←f.p.dist.SelItems
     dist←↑f.p.dist.(SelItems/Items)~' '
     K←{⍵≡'normal':'prob' '<' '0 to 3.3,.1' '0 to 0.09,.01'
         ⍵≡'binomial':'prob' '=' '2 to 10' '.1 to .9,.1'
         ⍵≡'poisson':'prob' '=' '.1 to 10,.1' '0 to 15'
         ⍵≡'tDist':'criticalValue' '<' '1 to 30' '.1 .05 .025 .01 .005'
         ⍵≡'chiSquare':'criticalValue' '<' '1 to 30' '.25 .1 .05 .025 .01 .005'
         ⍵≡'fDist':'criticalValue' '<' '1 to 3' '.05'
         1↓V[;1]}dist
     V[;1]←(⊂dist),K
     f.p.Values←V
     f.p.dist.SelItems←b
     makeStatTable f
     1
 }

 OnSelectDrop←{
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     i←ob.##.(CurCell-⎕IO)
     A←↑i⌷⍺.Grid.Attributes
     ob.Items←⍺{
         0=⍵.⎕NC'Items':,⊂'stats'
         2=≡⍵.Items:⍵.Items             ⍝ If nested list use as is
         V←1 variables #                ⍝ get list of variables 
         V←(~'['∊¨V)/V                  ⍝ Remove namespaces
         TY←'CBF'[326 11⍳⎕DR¨#⍎¨V]      ⍝ Identify Type
         V←⍵.Items{⍺∊'cbf':⍵ ⋄ (⍺=TY)/⍵}V ⍝ Select appropriate fields
         V,⍨'[Select]'{6::⊂⍺ ⋄
             0=≢⍵.TopItem:⊂⍺
             ⊆⍵.TopItem}⍵              ⍝ Append top items to drop down
     }A
     ob.SelItems←ob.Items∊i⌷⍺.Grid.Values
     ⍺.Event←'Select'
     ⍺.EventArg←↑i⌷⍺.Grid.Names
     NS←{'confInt'≡⍵.get'Operator':confIntAPI ⍵
         hypothesisAPI ⍵}⍺
     f←getform ob
     f.syntax.d.Values←NS.Grid.Values
     ob.##.CellTypes←' TPDENF'⍳NS.Grid.Attributes.Type
     1
     
 }

 OnSelectFactors←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     b←ob.SelItems
     d←f.syntax.d
     ⍺.GridValues←'LbFactor1'⍺.put↑ob.(SelItems/Items)
     ⍺.Event←'Select'
     ⍺.EventArg←'LbFactor1'
     NS←anovaAPI ⍺
     d.Values←NS.GridValues
     d.CellTypes←' TQDENF'⍳NS.GridTypes
     1
 }

 OnSelectFit←{
     ⍝Select a fit
     ⍝
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     f←getform ⍵
     d←f.syntax.d
     g←f.params.g
     D←ob.(SelItems/Items) ⍝ Distribution
     ⍺.Grid.Values←'Dist'⍺.put↑D
     ⍺.Event←'Select'
     ⍺.EventArg←'Dist'
     NS←chiSquareAPI ⍺
     d.Values←NS.Grid.Values
     g.CellTypes←' TNXAQ'⍳⍺.CellTypes
     d.CellTypes←' TQNEd'⍳NS.Grid.Attributes.Type
     d.CellTypes[1 2;1]←6 7 ⋄ d.CellTypes[3;3]←5
     g.Values←NS.Table
 }

 OnSelectInf←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     j←1+i←0,(d.Values[4;0]≡⊂'Sample 2')/3   ⍝One or two samples
     d.Values[2;1]←⊂ob.Text
     d.Values[i;3]←ob.SelItems/'Mean' 'Events' 'Mean' 'Mean'
     d.Values[i;4]←ob.SelItems/'Std Dev' 'Proportion' 'Std Dev' 'Variance'
          ⍝d.Values[j;4]←ob.SelItems/0 0 0 0
     b←d.Values[j;1]∊⊂'stats'
     c3←↑ob.SelItems/7 6 1 1
     c4←↑ob.SelItems/8 1 8 8
     d.CellTypes[j;3 4]←⍉c3 c4∘.*b
     1
     
 }

 OnSelectLevels←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     b←ob.SelItems
     d←f.syntax.d
     NM←d.CurCell⌷⍺.GridNames
     ⍺,Event←'Select'
     ⍺.EventArg←NM
     ⍺.GridValues←NM ⍺.put↑ob.(SelItems/Items)
     NS←anovaAPI ⍺
     d.Values←NS.GridValues
     d.CellTypes←' TQEFN'⍳NS.GridTypes
     1
 }

 OnSelectMultinomial←{
         ⍝ Get Parameter List from Distribution
         ⍝0::0
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     d←f.syntax.d
     V←d.Values[;1]
          ⍝ Check conditions
     b←'multinomial'≡↑V[1]    ⍝ Distributionis multinomial
     b∧←'goodnessOfFit'≡↑V[2] ⍝ Operator is goodness of Fit
     b∧←' '∨.≠↑V[3]           ⍝ Data set is not blank
     ~b:0                     ⍝ Exit if conditions not met
     ff←frequency⍎'#.(',(3⊃V),')'   ⍝ Get Frequenncy
     ff[;1]←÷≢ff
     g←f.params.g
     g.Values←ff,' '
     p←f.params.g
     p.CellWidths←150 200 250
     p.ColTitles←'Parameter' 'Value' 'Description'
     d←↑⍵[0].(SelItems/Items)~' '
     _←##.GUI.clear p
     d≡'':0
     d≡'multinomial':buildMultinomial f
     t B N←MakeParameterTable''
     dp←B⊂(0⌷[1]d⍷t[;⍳⍴d])⌿t    ⍝ Select parameters for distribution
     nn←dp[;N⍳'PARAMETER' 'DEFAULT' 'DESCRIPTION']
     nn[;1]←⍎¨nn[;1]
     nn[;2]←##.Util.deleteExcessBlanks¨nn[;2]
     p.Values←nn
     lab←p AddLabel''
     num←p AddNumField''
     spi←p AddSpinner''
     spi.Limits←1 1000
     p.Input←'lab' 'num' 'spi' 'edt'
     p.CellTypes←(⍴nn)⍴1 2 1
     p.BCol←(⍴nn)⍴¯16 0 0 0
     p.CellTypes[;1]+←⍎∊dp[;N⍳⊂'INTEGER']
     ActiveGraph f
 }

 OnSelectNum←{
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     i←ob.##.CurCell          ⍝Find location in grid
     A←↑i⌷⍺.Grid.Attributes
     ob.FormatString←A.FormatString
     0=⍴ob.Value:1
     A.validate ob.Value:(i⌷⍺.Grid.Values)←ob.Value
     f←getform ob
     f.xg.expr←'Invalid Entry'
     1
 }

 OnSelectOperator←{
         ⍝ Show proper fields for operator
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ⎕PATH←'#.GUI #.CGUI'
     b←f.syntax.d.oper.SelItems
     grid←f.syntax.d
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     grid.Values←4↑grid.Values
     grid.rel.SelItems←1=⍳≢grid.rel.SelItems
     grid.CellTypes←1,[0.5]2 3 4 5
          ⍝grid.Values[2;1]←0
     grid.Values[3;0]←⊂'Value'
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     grid.Values[2;0]←b/2 1 1/'Relation' '' 'Function'
     grid.Values[3;0]←b/'Probability' 'Value' 'SampleSize' ''
     grid.Values[3;1]←b/0.05 1 100 0
     grid.Values[2;1]←b/'≤' '≤' '' 'mean'    ⍝ Blank out if random var
     dist←grid.Values[0;1]
     fns←'mean' 'sdev' 'median' 'mode' 'variance' 'iqr' 'skewness' 'kurtosis'
     rels←'<' '≤' '=' '≠' '>' '≥' 'in' 'between' 'outside'
     grid.Values[1;1]←b/grid.oper.Items
     grid.CellTypes[2 3;1]←↑b/(4 5)(4 5)(1 6)(4 5)
     grid.rel.Items←↑b/rels rels''fns
     1}

 OnSelectParameter←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     parm←↑ob.(SelItems/Items)
     ⍺.Grid.Values←'Parameter'⍺.put parm
     ⍺.Event←'Select'
     NS←sampleSizeAPI ⍺
     f.syntax.d.Values←NS.Grid.Values
     f.syntax.d.CellTypes←' TPDF'⍳NS.Grid.Attributes.Type
     
     
     
     
     
     1
     
 }

 OnSelectProbData←{
         ⍝ Var settings for Anova
         ⍝ Written by Steve Mansour
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     g←f.params.g
     ⍺.Event←'Select'
     ⍺.EventArg←↑d.CurCell⌷⍺.Grid.Names
     ⍺.Grid.Values←⍺.(EventArg∘put)↑ob.(SelItems/Items)
     NS←probabilityAPI ⍺
     g.Values←NS.Table
     g.CellTypes←' TINA'⍳NS.CellTypes
     d.Values←NS.Grid.Values
     d.CellTypes←' TNED'⍳NS.Grid.Attributes.Type
     d.CellTypes[3;1]←5  ⍝ Conj
     d.CellTypes[5;1]←6  ⍝ Rt Op
     1
 }

 OnSelectRelation←{
         ⍝ Show proper fields for operator
     ⎕IO←0 ⋄ ⎕ML←3
     FFF←getform ⍵
     grid←FFF.syntax.d
     grid.Values[2;0]≡⊂'Function':0
     b←FFF.syntax.d.rel.SelItems
     r←↑FFF.syntax.d.Values[2;1]
     p←grid.Values[1;1]≡⊂'probability'
     SelectBetween←{
         ⍵.Values←5↑⍵.Values
         ⍵.CellTypes←1,[0.5]2 3 4 5
         ⍵.Values[2;1]←⊂'between'
         ⍵.rel.SelItems←0 0 0 0 0 0 0 1 0
            ⍝  p←⍵.Values[1;1]≡⊂'probability'
         ~p:⍵.Values[3;0 1]←'Value' 0.05
         ⍵.CellTypes[3;1]←7
         ⍵.Values[3;0 1]←'Value(s)' '0 1'
         1
     }
     SelectOutside←{
         ⍵.Values←5↑⍵.Values
         ⍵.CellTypes←1,[0.5]2 3 4 5
         ⍵.Values[2;1]←⊂'outside'
         ⍵.rel.SelItems←0 0 0 0 0 0 0 0 1
         ~p:⍵.Values[3;0 1]←'Value' 0.95
         ⍵.CellTypes[3;1]←7
         ⍵.Values[3;0 1]←'Value(s)' '1.96'
         1
     }
     SelectIn←{
         ⍵.Values←4↑⍵.Values
         ⍵.CellTypes←1,[0.5]2 3 4 7
         ⍵.Values[2;1]←⊂'in'
         ⍵.rel.SelItems←0 0 0 0 0 0 1 0 0
         ⍵.Values[3;0]←⊂'Items'
         1
     }
     8⊃9↑b:SelectOutside grid
     7⊃9↑b:SelectBetween grid
     6⊃9↑b:SelectIn grid
     grid.Values←4↑grid.Values
     grid.rel.SelItems←b
     m←grid.Values[0;1]≡⊂'multinomial'
     c←m∧' '=↑0⍴↑grid.Values[3;1]
     grid.CellTypes←1,[0.5]2 3 4,c⊃5 7
     grid.Values[2;1]←b/grid.rel.Items
     grid.Values[3;0]←⊂'Value'
     m:1
     grid.Values[3;1]←(~p)×↑b[2 3]/0.95 0.05
     1}

 OnSelectRows←{
         ⍝ Show proper fields for operator
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     d←f.syntax.d
     g←f.params.g
     ob←↑⍵
     r←ob.##.CurCell
     ⍺.Event←'Select'
     ⍺.EventArg←↑r⌷⍺.Grid.Names
     ⍺.Table←g.Values
     ⍺.Grid.Values←⍺.EventArg ⍺.put 2⊃⍵ ⍝ Put new value in cell
     NS←⍺{⍵='P':probabilityAPI ⍺ ⋄ chiSquareAPI ⍺}↑f.Caption  ⍝ ChiSquare or Prob?
     d.Values←NS.Grid.Values
     g.Values←NS.Table
         ⍝g.CellTypes←NS{0≡↑0⍴⍵[0;1]:' TNXAQ'⍳⍺.CellTypes        ⍝ If goodnessOfFit
     g.CellTypes←NS{0≡↑0⍴↑⍵[0;1]:' TNXAQ'⍳⍺.CellTypes        ⍝ If goodnessOfFit
         4,4⍪(¯1+⍴⍵)⍴2}NS.Table
     g.CellWidths←(¯20+1⊃g.Size)÷1⊃⍴g.Values
     1}

 OnSelectRtop←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     g←f.params.g
     ⍺.Event←'Select'
     ⍺.EventArg←'RtOp'
     ⍺.Grid.Values←⍺.(EventArg∘put)↑ob.(SelItems/Items)
     NS←probabilityAPI ⍺
     g.Values←NS.Table
     d.Values←NS.Grid.Values
     d.CellTypes←' TNED**P'⍳NS.Grid.Attributes.Type
     d.CellTypes[3;1]←5  ⍝ Conj
     d.CellTypes[5;1]←6  ⍝ Rt Op
     1
 }

 OnSelectSample←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
     ⍺.GridValues←'LbSample2'⍺.put ob.Text
     b←(⊂'confInt')∊d.Values                ⍝ Is this a conf int?
     NS←{b:confIntAPI ⍵ ⋄ hypothesisAPI ⍵}⍺
     d.Values←NS.GridValues
     d.CellTypes←' TQPDELNXSnxsqR'⍳NS.GridTypes
     0
 }

 OnSelectStat←{
         ⍝ Get Parameter List from Distribution - Last updated 6/6/19
         ⍝ For Hypothesis testing
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
     ⍺.GridValues←'Parameter'⍺.put↑ob.(SelItems/Items)
     NS←hypothesisAPI ⍺
     d.Values←NS.GridValues
     d.CellTypes←' TQPDELNXSnxsq'⍳NS.GridTypes
     0
 }

 OnSelectTable←{
         ⍝ Show proper fields for operator
     ⎕IO←0 ⋄ ⎕ML←3
     ob←↑⍵
     b←ob.SelItems              ⍝ b= 1 0 - variable, b = 0 1 table
     f←##.GUI.getform ⍵
     grid←f.syntax.d
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     grid.Values[1;0]←b/'Variable' ''
     grid.Values[2;0]←b/'Categories' ''
     grid.CellTypes[1;1]←b/5 1
     grid.Values[1;1]←' '
     grid.Values[4;0]←b/'Variable' 'Table'
     grid.Values[5;0]←b/'Categories' ''
     1}

 OnSelectTreatment←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     d←f.syntax.d
     NM←↑d.CurCell⌷⍺.Grid.Names
     ⍺.Grid.Values←NM ⍺.put 2⊃⍵
     g←f.params.g
     ⍺.Event←'Select'
     ⍺.EventArg←NM
     ⍺.Table←g.Values
     NS←anovaAPI ⍺
     g.Values←NS.Table
     g.Values←((⊂⍬)@{⍵∊⎕NULL})NS.Table
     d.CellTypes←' TQDENF'⍳NS.Grid.Attributes.Type
     N←NS.get'Factor2'
     b←(↑N∊0 1)⍱0=≢N
     g.TitleHeight←b/0
     g.CellTypes←' ANX'⍳NS.CellTypes
          ⍝~b:g.CellTypes←(⍴g.Values)⍴1 2 3 3
     ~b:1
          ⍝g.CellTypes←1,1⍪(¯1+⍴g.Values)⍴3
     g.CellWidths←(¯20+1⊃g.Size)÷1⊃⍴g.Values
     1
 }

 OnSelectType←{
         ⍝⍝ Show proper fields for operator
     ⍝     ⎕IO←0 ⋄ ⎕ML←3
     ⍝     ob←↑⍵
     ⍝     b←ob.SelItems              ⍝ b= 1 0 - gof, b = 0 1 ind
     ⍝     f←##.GUI.getform ⍵
     ⍝     grid←f.syntax.d
     ⍝     ⍺.Grid.Values←'VarType'⍺.put ob.Text
     ⍝     ⍺.Event←'Select'
     ⍝     ⍺.EventArg←'VarType'
     ⍝     NS←chiSquareAPI ⍺
     ⍝     grid.Values←NS.Grid.Values
     ⍝     grid.CellTypes←' TQNEd'⍳NS.Grid.Attributes.Type
     ⍝     g←f.params.g
     ⍝     g.Values←NS.Table
     ⍝     ⍝i←ob.Text≡'independent'
     ⍝     grid.CellTypes[2;1]←7     ⍝ Op
     ⍝     grid.CellTypes[1;1]←i⊃6 4 ⍝ Variable 1
     ⍝     grid.CellTypes[3;3]←i⊃5 1 ⍝ Type
     ⍝     g.TitleHeight←30×~i
     ⍝     i:g.CellTypes←' TNXAQ'⍳'A','A'⍪1 1↓(⍴g.Values)⍴'N'
     ⍝     g.CellTypes←(⍴g.Values)⍴' TNXAQ'⍳NS.ColTypes
     ⍝
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     d←f.syntax.d
     g←f.params.g
     ob←↑⍵
     r←ob.##.CurCell
     ⍺.Event←'Select'
     ⍺.EventArg←↑r⌷⍺.Grid.Names          ⍝ Event is name of cell
     ⍺.Grid.Values←d.Values
     TY←↑ob.(SelItems/Items)
     ⍺.Grid.Values←⍺.EventArg ⍺.put↑ob.(SelItems/Items)
     NS←chiSquareAPI ⍺
     g.Values←NS.Table
     g.CellTypes←' TNXAQ'⍳⍺.CellTypes
 }

 OnSelectVar←{
         ⍝ Var settings for Anova
         ⍝ Written by Steve Mansour
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
     ⍺.EventArg←↑d.CurCell⌷⍺.Grid.Names
     ⍺.Grid.Values←⍺.(EventArg∘put)↑ob.(SelItems/Items)
     NS←anovaAPI ⍺
     f.params.g.Values←NS.Table
     f.params.g.CellTypes←' ANX'⍳NS.CellTypes
     d.Values←NS.Grid.Values
     d.CellTypes←' TQDdNF'⍳NS.Grid.Attributes.Type
         ⍝ d.CellTypes[3;1]=5:1
     ⍝     d.CellTypes[3 4;1]+←1
     d.CellTypes[5;1]=5:1
     d.CellTypes[5 6;1]+←1
     1
 }

 OnSelectVariable←{
         ⍝ Get Parameter List from Distribution
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     b←ob.SelItems
     d←f.syntax.d
     ⍺.GridValues←'LbFactor'⍺.put↑ob.(SelItems/Items)
     ⍺.Event←'Select'
     ⍺.EventArg←'LbFactor'
     NS←anovaAPI ⍺
     d.Values←NS.GridValues
          ⍝d.CellTypes[4;1]←b/1 3
     d.CellTypes←' TQEFN'⍳NS.GridTypes
     1
 }

 PlotResiduals←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     name←↑f.p.Values[0;3]
     ex←name,'.E scatterPlot ',name,'.YHAT'
     fc←buildChart''
     X←name,'.E'
     Y←name,'.YHAT'
     fc.syn.g.Values←1 4⍴0 'scatterPlot'X Y
     DisplayGraph fc
 }

 Predict←{
     ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
     ⍝∇ Obtain prediction values from a form
     ⍝∊ User Interface
     ⍝⍵ Form
     ⍝ Predict the value of the dependent variable using regression model
     ⎕IO←0 ⋄ ⎕ML←3
     fp←getform ⍵
     obs←getobs fp
     M←exErr fp.g.mod.Text
     c←0.01×fp.g.conf.Value
     fp.g.equ.Text←M.Equation
     K←¯1+≢M.VariableNames
     cb←obs.cg.(⍎¨↓⎕NL 9)
     b←1 2 2/cb.State[1 0 2]
     x←fp.syntax.d.Values[;⍳K]
     M.Confidence←obs.conf.Value
     YHAT←M predict x
     s←⍴fp.syntax.d.Values←x,b/YHAT
     fp.syntax.d.CellTypes←s⍴s[1]↑1↓1+M.VariableTypes,5/2
     NL←M.VariableNames
     RT←NL[0],'Lower Conf' 'Upper Conf' 'Lower Pred' 'Upper Pred'
     fp.syntax.d.ColTitles←1↓NL,b/RT
     1
 }

 PredictionWizard←{
      ⍝ Predict the value of the dependent variable using regression model
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     Model←exErr↑f.p.Values[0;3]
     2=⎕NC'Model':1  ⍝ Put in error message here?
     fp←buildPredict''
     fp.g.mod.Text←↑f.p.Values[0;3] ⍝ Get model name
     fp.g.equ.Text←Model.Equation    ⍝ Get model equation
     fp.syntax.d.ColTitles←1⌽Model.VariableNames
     k←≢Model.VariableNames
     fp.syntax.d.CellTypes←⍉⍪1+1↓Model.VariableTypes,2
     fp.syntax.d.Values←1 k⍴0
     ⎕DQ'fp'
 }

∇ {∆Z}←RUN ∆X;∆IN;∆OUT;∆F;vcat;∆D;∆INX;∆Err;∆Disp;∆W
 ⎕IO←0 ⋄ ⎕ML←3
 ∆F←getform ∆X
 ∆INX←deleteExcessBlanks ∆F.in.Text
 ∆IN←1↓('<>'⎕R'≠')('<='⎕R'≤')('>='⎕R'≥')('<-'⎕R'←')' ',∆INX
 :If (↑∆X).##.mst.msy.Standard.Checked
     ∆IN←('\x{5E}'⎕R'*')('/'⎕R'÷')('\x{2A}'⎕R'×')∆IN
     ∆IN←1↓('([\s,\,])-([\d,\.])'⎕R'\1¯\2')' ',∆IN
     ∆IN←('''×'''⎕R'''*'''),∆IN  ⍝ Replace '×' with '*'
 :EndIf
 ∆F.in.Items,⍨←⊂∆F.in.Text
 vcat←{0 1↓⍕2 1⍴⍺ ⍵}
 ∆W←150
 ∆OUT←{0::⎕DMX.(0J1,EM,'    ',Message) ⋄ ⍝ ⍕⍎⍵    ⍝ Use special character to flag error
     t←⍕⍎⍵ ⋄
     (1+∆W)≥↑⌽⍴t:t
     a←¯1+⍴⍴t
         ⍝ (w↑[a]t)vcat w↑[a]'+',w↓[a]t}'#.(',∆IN,')'
     ⊃,/(¯3↓∆W↑[a]t),⊂'...'}'#.(',∆IN,')'
 vcat←{0 1↓⍕2 1⍴⍺ ⍵}
 ∆Err←0J1=↑∆OUT ⋄ ∆OUT←∆Err↓∆OUT                ⍝ Error?
 ∆Disp←∆Err∨~'←'∊∆IN                            ⍝ Display if error or no assignment
 ∆F.g.out.Text←{(∆W⌊↑⌽⍴⍵)↑⍤1⊢⍵}1/∆F.g.out.Text ⍝ If session gets too wide, truncate it
 ∆D←('     ',∆INX)vcat(∆Disp/∆OUT)vcat ∆F.g.out.Text
 ∆F.g.out.Text←∆D
 ∆Z←0
∇

 RunChiSquareTest←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     ⍺.Grid.Values←f.syntax.d.Values
     op←⍺.get'Op'
     ⍺.Table←f.params.g.Values
     ⍺.Event←'Run'
     NS←chiSquareAPI ⍺
     f.params.g.Values←NS.Table
     f.xg.expr.Text←NS.Expr                     ⍝
     f.gr.result.Text←NS.Output                 ⍝
     1
 }

 RunProb←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     ⍺.Grid.Values←f.syntax.d.Values
     ⍺.Table←f.params.g.Values
     ⍺.Event←'Run'
     NS←probabilityAPI ⍺
     f.params.g.Values←NS.Table
     _←NS buildVenn f
     f.xg.expr.Text←NS.Expr                     ⍝
     f.xg.result.Text←⍕NS.Result                 ⍝
     1
 }

∇ SYNTAX X;∆IN;∆OUT;F;vcat;∆D;str;i
 ⎕IO←0 ⋄ ⎕ML←3
 F←getform X
 str←' ',F.in.Text~' '
 i←1⍳⍨∨/str⍷' ',#.Util.Syntax
 F.in.Text←(#.Util.Syntax⍪32↑'No Help Available')[i;]
∇

∇ SYNTAX1 X;∆IN;∆OUT;F;vcat;∆D;str;S;obj;i
 ⎕IO←0 ⋄ ⎕ML←3
 obj←⍎↑X
 F←getform obj
 F.in.Text←obj.Caption
 str←' ',F.in.Text~' '
 i←1⍳⍨∨/str⍷' ',#.TamStat.Util.Syntax
 S←(#.TamStat.Util.Syntax{⍺⍪(↑⌽⍴⍺)↑⍵}'No Help Available')[i;]
 F.in.Text←(('←'∊S)×1+S⍳'←')↓S
∇

 SetMultiParm←{
     ⎕PATH←'#.TamStat.GUI'
          ⍝G←buildMultiNomial ''
     f←getform ⍵
     b←f.r.Numeric.State
     f.(r.i io s).Active←b
     f.(r.i io s).BCol←¯16×~b
     1
 }

 SetMultinomial←{
     ⎕IO←0 ⋄ ⎕ML←3
     ⎕PATH←'#.TamStat.GUI'
          ⍝G←buildMultinomial ''
     f←getform ⍵
     f.⎕IO←0
     f1←getform ⍺
     'Chi-Square Test Wizard'≡22↑f1.Caption:f{
         g←⍵.params.g  ⍝ Grid Object
         b←⍺.r.Numeric.State
         g.CellTypes←⍺.n.Value 3⍴4 3[b],2 3
         x←,b{⍺:⍵.(io.Value+s.Value×⍳n.Value)
             ⍵.n.Value↑,[⍳0]⎕A}⍺
         g.Values←x∘.{⍵:⍺ ⋄ ⍵}1 0 0
         g.Active←1
         ⍺.Close
         1}f1
        ⍝  g←⍺.params.g
     g←f1.params.g
     lab←g AddLabel''
     num←g AddNumField''
          ⍝num.FontObj←'APL385 Unicode'
     spi←g AddSpinner''
     spi.Limits←1 1000
     edt←g AddEdit''
     g.Input←'lab' 'spi' 'num' 'edt'
     g.BCol←¯16 0 0 0
     b←f.r.Numeric.State
        ⍝  g.CellTypes←f.n.Value 3⍴4 2[b],2 1
     g.CellTypes←f.n.Value 3⍴4 2[b],3 1
     x←b{⍺:⍵.(io.Value+s.Value×⍳n.Value)
         ⍵.n.Value↑,[⍳0]⎕A}f
     pr←⍴∘÷⍨≢x
     g.Values←x,pr,[0.5]' '
     f1.syntax.d.CellTypes[3;1]←7 5[b]
     f1.syntax.d.Values[3;1]←'A' 0[b]
     f1.syntax.d.Values[2;1]←'='
     g.CellWidths←250 250 0 1
     g.ColTitles←'Value' 'Probability' ''
          ⍝p.AutoExpand←1 0
     f.Close
     
 }

∇ z←ShowStats X;f;d;r;txt;b;b0;Y;sf;D;i;d1;c;j
         ⍝ Get Parameter List from Distribution
         ⍝ This doesn't work anymore
 ⎕IO←0 ⋄ ⎕ML←3
 f←##.GUI.getform X
 d←f.syntax.d
 c←(⊂'confInt')∊d.Values
      ⍝ob←↑X
 d1←3*c
 b0←~(∊¨d.Values[d1 4;1])∊⊂'stats'
 b←b0∧1,1⊃d.hs.SelItems
 sf←↑d.Values[2-c;1]
 z←c
 :If ∨/b
     i←b/d1 4
     D←⍎¨⍕¨'#.('∘,¨d.Values[i;1],¨')'
     :Select sf
     :Case 'mean'
         d.Values[i;2 3 4]←⊃(count,mean,sdev)¨D
     :Case 'proportion'
         d.Values[i;2 3 4]←⊃(count,+/,mean)¨D
     :Case 'sdev'
         d.Values[i;2 3 4]←⊃(count,mean,sdev)¨D
     :Case 'variance'
         d.Values[i;2 3 4]←⊃(count,mean,var)¨D
     :EndSelect
     
     
 :EndIf
 b←(~b0)∧1,1⊃d.hs.SelItems
 :If sf≡'proportion' ⋄ :AndIf ∨/b
     i←b/d1 4
     d.Values[i;4]←÷/⌽d.Values[i;2 3]
 :EndIf
∇

∇ TNEDDD
∇

 UpdateInterval←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     c←(↑⍵).SelItems
     f.p.lev.Value←↑c/0 95 95
     f.p.Values[0;,3]←c/0 95 95
     f.p.Values[0;,4]←c/(↑⍵).Items
     f.p.lev.Active←↑c/0 1 1
 }

 UpdateSession←{
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     exp←⊂{0=⎕NC'f.xg.name':⍵
         ' '∧.=f.xg.name.Value:⍵
         f.xg.name.Value,' <- ',⍵
     }f.xg.expr.Value
     _←f.Close
     0=⎕NC'SessionForm':⎕←exp
     SF←SessionForm
     SF.in.Items←exp,SF.in.Items ⍝ Assign to combo
     SF.in.(SelItems←(⍴SelItems)↑1)
 }

 buildAnova←{                            ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     T←'ANOVA Wizard'
     f←CreateForm(T~' ')T 1                      ⍝ Create Form
     NS←⎕NS''
     NS.Event←'Init'
     NS←anovaAPI NS
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Calculate Test Statistic'
     ms←mb AddMenuItem'Save Expression'
     mc.onSelect←'BuildAnovaExpr'NS
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←300 200
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←NS.Grid.Values
     lbl←d AddLabel''
     sig←d AddNumField'Significance'
     sig.FontObj←fo1
     sig.Value←0.05
     data←d AddDropEditCombo'Data'
          ⍝data.onSelect←'OnSelectAnovaData'NS
     data.FontObj←fo1
     V←1 ##.Util.variables #
        ⍝  data.Items←(⊂'stats'),V
     data1←d AddDropEditCombo'Data'
     data.onDropDown←'OnDropDown'NS
     data.onSelect←'OnSelectVar'NS
     data1.onSelect←'OnSelectVar'NS
     data1.FontObj←fo1
     data1.Items←V
     N←d AddSpinner''
     N.Limits←1 10
     N.onSpin←'OnSelectTreatment'NS
     num←d AddNumField''
     char←d AddEdit''
     d.Input←'lbl' 'sig' 'data' 'data1' 'N' 'num' 'char'
     d.CellFonts←'fo1'
     d.CellTypes←' TQDENFC'⍳NS.Grid.Attributes.Type
     params←f AddGroup'Categories'
     g←params AddGrid'Categories'
     lvl←g AddEdit''
     N←g AddSpinner''
     X←g AddNumField''
     g.ColTitles←NS.ColTitles2
     g.Values←((⊂⍬)@{⍵∊⎕NULL})NS.Table
     g.TitleWidth←0
     g.CellWidths←160
     g.FontObj←fo1
     g.Input←'lvl' 'N' 'X'
     g.CellTypes←(⍴g.Values)⍴1 2 3 3
     xg←f AddGroup'Expression'
     expr←xg AddEdit'Expression'
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     gr←f AddGroup'Report'
     fo3←'Courier New' 20 1 0 0 700
     gr.Attach←('Top' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     result←gr AddTextBox1''
     result.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo3
     result.ReadOnly←1
     result.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildAnova_ X;⎕TRAP;A                  ⍝ Configuration function generated by FunctionForm
 Z←X                                      ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                     ⍝ Ignore any problem
 A←X.Posn,X.Size                          ⍝ Note original size
 X.Configure 75 331 892 1399              ⍝ Form: ANOVAWizard
 X.syntax.Configure 16 29 308 1282        ⍝ Group: syntax
 X.syntax.d.Configure 17 12 273 525       ⍝ Grid: d
 X.syntax.d.lbl.Configure 0 0 30 299      ⍝ Label: lbl
 X.syntax.d.lbsig.Configure 34 ¯57 33 218 ⍝ Label: lbsig
 X.syntax.d.sig.Configure 32 40 36 80     ⍝ Edit: sig
 X.syntax.d.lbdata.Configure 34 49 33 62  ⍝ Label: lbdata
 X.syntax.d.data.Configure 35 40 31 80    ⍝ Combo: data
 X.syntax.d.lbdata1.Configure 59 90 33 62 ⍝ Label: lbdata1
 X.syntax.d.data1.Configure 60 60 31 121  ⍝ Combo: data1
 X.syntax.d.N.Configure 58 60 36 121      ⍝ Spinner: N
 X.params.Configure 29 573 280 706        ⍝ Group: params
 X.params.g.Configure 21 15 246 669       ⍝ Grid: g
 X.params.g.lvl.Configure 29 0 30 99      ⍝ Edit: lvl
 X.params.g.N.Configure 73 67 32 134      ⍝ Spinner: N
 X.params.g.X.Configure 73 67 32 134      ⍝ Edit: X
 X.xg.Configure 339 26 70 1290            ⍝ Group: xg
 X.xg.lbexpr.Configure 108 149 23 200     ⍝ Label: lbexpr
 X.xg.expr.Configure 21 21 38 1246        ⍝ Edit: expr
 X.gr.Configure 420 26 438 1294           ⍝ Group: gr
 X.gr.result.Configure 94 15 311 1278     ⍝ Edit: result
 :If X.Type≢'Form'                        ⍝ Re-configure back...
     X.Configure A                        ⍝ ...to original specs
 :EndIf                                   ⍝ 8/12/2022
∇

 buildBayes←{                           ⍝ Build Function
     ⎕PATH←'##.GUI' ⋄ ⎕IO←0 ⋄ ⎕ML←3     ⍝ Look here for form designer
     T←'Bayesian Wizard'
     f←CreateForm(T~' ')T 1              ⍝ Create Form
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Calc'
     ms←mb AddMenuItem'UpdateSession'
     mc.onSelect←'calcBayes'
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     syntax.Attach←('Top' 'Left' 'Bottom' 'Left')⍝..to allow the scroll bars to expand with the form
     d←syntax AddGrid''
     d.FormatString←'F10.5'
     d.FontObj←fo1
     d.CellWidths←250 140 180 140 140
     d.TitleWidth←50
     char←d AddEdit''
     num←d AddNumField''
     d.FormatString←'F7.5'
     out←d AddLabel''
     out.Justify←'Right'
     d.ShowInput←1
     exp←d AddDropEditCombo''
     d.Input←'char' 'num' 'out'
     d.Values←2 5⍴'A' 0 0 0 0('A''')0 0 0 0
     d.CellTypes←2 5⍴1 2 2 3 3
     d.TitleHeight←60
     ct←'Event' 'Prior' 'Conditional' 'Joint' 'Posterior'
     d.ColTitles←⊃¨↓⍉⊃ct(' A' 'P(A)' 'P(B|A)' 'P(A∩B)' 'P(A|B)')
     d.BCol←0 0 ¯16
     d.AutoExpand←1 0
     d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d.onAddRow←'AddBayesRow'
     p←f AddGrid''
     p.Values←1 5⍴'Total' 1 'Marginal P(B)' 0 1
     p.FontObj←d.FontObj
     p.CellWidths←d.CellWidths
     p.TitleWidth←d.TitleWidth
     p.TitleHeight←0
     p.FormatString←d.FormatString
     p.BCol←¯16
     p.Attach←('Bottom' 'Left' 'Bottom' 'Left')⍝..to allow the scroll bars to expand with the form
     xg←f AddGroup'Expression'
     xg.Attach←('Bottom' 'Left' 'Bottom' 'Left')⍝..to allow the scroll bars to expand with the form
     expr←xg AddEdit''
     xg.FontObj←fo1
     xg.ReadOnly←1
     xg.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildBayes_ X;⎕TRAP;A                 ⍝ Configuration function generated by FunctionForm
 Z←X                                     ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                    ⍝ Ignore any problem
 A←X.Posn,X.Size                         ⍝ Note original size
 X.Configure 264 273 381 1001            ⍝ Form: BayesianWizard
 X.syntax.Configure 5 19 145 1392        ⍝ Group: syntax
 X.syntax.d.Configure 15 11 152 937      ⍝ Grid: d
 X.syntax.d.char.Configure 400 150 30 99 ⍝ Edit: char
 X.syntax.d.num.Configure 41 44 36 89    ⍝ Edit: num
 X.syntax.d.out.Configure 400 998 33 49  ⍝ Label: out
 X.syntax.d.exp.Configure 43 44 31 89    ⍝ Combo: exp
 X.p.Configure 166 30 38 933             ⍝ Grid: p
 X.xg.Configure 216 29 93 952            ⍝ Group: xg
 X.xg.expr.Configure 39 19 36 918        ⍝ Edit: expr
 :If X.Type≢'Form'                       ⍝ Re-configure back...
     X.Configure A                       ⍝ ...to original specs
 :EndIf                                  ⍝
∇

 buildCellTypes←{
       ⍝⍵ is a list of Field Types
     ⎕IO←0 ⋄ ⎕ML←3
     I←⎕UCS ⍵
     ' TPDENF'⍳⎕UCS I-32×I≥97   ⍝ Handle lower case
 }

 buildChart←{                                 ⍝ Build Function
         ⍝ ⎕PATH←'##.GUI'                          ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     T←'Chart Wizard'
     f←CreateForm(T~' ')T 1                   ⍝ Create Form
     f.Caption←'Chart Wizard    ',copyright  ⍝ Caption
     mb←f AddMenuBar''
     mg←mb AddMenuItem'Display Graph'
     mg.onSelect←'DisplayGraph'
     ms←mb AddMenuItem'Save Expression'
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     syn←f AddGroup'Syntax'
     syn.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     g←syn AddGrid''
     g.FontObj←fo1
     g.TitleWidth←0
     g.ColTitles←'Bins' 'Chart Type' 'Variable 1' 'Variable 2'
     g.CellWidths←150 200 200 200
     c←g AddDropCombo''
     cc←'pieChart,barChart,boxPlot,dotPlot,histogram,scatterPlot,stemAndLeaf,frequency'
     c.Items←##.Util.toNestedVector cc
     c.onSelect←'OnSelectChart'
     vv←1 ##.Util.variables #
     va←g AddDropEditCombo''
     va.Items←vv
     wi←g AddNumField''
     lb←g AddLabel''
     lb.ReadOnly←1
     lb.BCol←¯16
     g.Input←'wi' 'c' 'va' 'lb'
     g.CellTypes←1 4⍴1 2 3 4
     g.Values←1 4⍴0 'pieChart' '' ''
     fo3←'Courier New' 16 1 0 0 700
          ⍝gr←f AddGroup'Report'
     gr←f AddGroup'Output'
     gr.Attach←('Top' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     result←gr AddTextBox1''
     result.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo3
     result.ReadOnly←1
     xg←f AddGroup'Expression'
     xg.Attach←('Bottom' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     expr←xg AddEdit'Expression'
     expr.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     expr.FontObj←fo1
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildChart_ X;⎕TRAP;A             ⍝ Configuration function generated by FunctionForm
 Z←X                                 ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                ⍝ Ignore any problem
 A←X.Posn,X.Size                     ⍝ Note original size
 X.Configure 59 196 657 919          ⍝ Form: ChartWizard
 X.syn.Configure 13 35 93 838        ⍝ Group: syn
 X.syn.g.Configure 19 40 61 755      ⍝ Grid: g
 X.syn.g.c.Configure 39 49 31 99     ⍝ Combo: c
 X.syn.g.va.Configure 43 44 31 89    ⍝ Combo: va
 X.syn.g.wi.Configure 117 58 36 99   ⍝ Edit: wi
 X.syn.g.lb.Configure 38 81 33 36    ⍝ Label: lb
 X.gr.Configure 120 43 449 837       ⍝ Group: gr
 X.gr.result.Configure 20 11 414 808 ⍝ Edit: result
 X.xg.Configure 585 43 53 837        ⍝ Group: xg
 X.xg.lbexpr.Configure 101 169 23 61 ⍝ Label: lbexpr
 X.xg.expr.Configure 14 14 29 809    ⍝ Edit: expr
 :If X.Type≢'Form'                   ⍝ Re-configure back...
     X.Configure A                   ⍝ ...to original specs
 :EndIf                              ⍝
∇

 buildChiSquare←{                        ⍝ Build Function
       ⍝   ⎕PATH←'##.GUI'                      ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm''                      ⍝ Create Form
     NS←⎕NS''
     NS.Event←'Init'
     NS←chiSquareAPI NS
     mb←f AddMenuBar''
     mg←mb AddMenuItem'Get Categories'
     mc←mb AddMenuItem'Calc'
     ms←mb AddMenuItem'Save Expression'
     mg.onSelect←'OnSelectRows'NS
     mc.onSelect←'RunChiSquareTest'NS
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     dist←'normal'
     f.Caption←'Chi-Square Test Wizard  ',copyright
     params←f AddGroup'Categories'
     g←params AddGrid'Categories'
     g.Posn←15 5
     g.Size←150 550
     g.ColTitles←NS.ColTitles2
     params.Posn←30 30
     params.Size←200 500
     g.CellWidths←250 150 260
     g.TitleWidth←0
     g.Values←NS.Table
     g.FontObj←fo1
     lab←g AddLabel''             ⍝ Parameter Names
     num←g AddNumField''          ⍝ Real numbers
     num.FormatString←'F10.3'
          ⍝spi←g AddSpinner''           ⍝ Integers
     int←g AddNumField''
          ⍝spi.FormatString←'I8'
     edt←g AddEdit''
          ⍝spi.Limits←1 1000
          ⍝spi.Bcol←0
     char←g AddEdit''
     pct←g AddNumField''
     pct.FormatString←'Q<%>K2F7.2'
         ⍝ g.Input←'lab' 'spi' 'num' 'char' 'pct'
     g.Input←'lab' 'int' 'num' 'char' 'pct'
     g.CellFonts←'fo1'
     g.CellTypes←(⍴g.Values)⍴' TNXAQ'⍳NS.ColTypes
     g.BCol←¯16 0 0 0
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
          ⍝d.CellWidths←200 200 200 100
     d.CellWidths←200 200 150 150
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←NS.Grid.Values
     lbl←d AddLabel''
     sig←d AddNumField'Significance'
     sig.FontObj←fo1
     sig.Value←5
     dist←d AddDropCombo'Distribution'
     dist.FontObj←fo1
          ⍝dist.Items←NS.DistList
     dist.Items←NS.(Grid.Attributes get'Dist').Items
     dist.SelItems←dist.Items∊⊂NS.get'Dist'
     dist.onSelect←'OnSelectFit'NS
     oper←d AddDropCombo'Operator'
     oper.onSelect←'OnSelectChiSqTest'NS
     oper.FontObj←fo1
     oper.Items←NS.(Grid.Attributes get'Op').Items
     oper.SelItems←1 0
     data←d AddDropEditCombo'Data'
     data.FontObj←fo1
     vartbl←d AddLabel'Variable'
     type←d AddDropCombo'Type'
     type.Items←NS.(Grid.Attributes get'VarType').Items
     type.onSelect←'OnSelectType'NS
     type.SelItems←1 0
     N←d AddSpinner'Rows'
     N.onSpin←'OnSelectRows'NS
     V←1 ##.Util.variables #
     data.Items←(⊂'frequency'),V
     data.onSelect←'OnSelectChiSqData'NS
     char←d AddEdit''
     d.Input←'lbl' 'sig' 'N' 'data' 'type' 'dist' 'oper'
     d.CellTypes←' TQNED'⍳NS.Grid.Attributes.Type
     d.CellTypes[1 2;1]←6 7 ⋄ d.CellTypes[3;3]←5
     d.CellFonts←1 5/'fo2' 'fo1'
     xg←f AddGroup''
     expr←xg AddEdit'Expression'
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     gr←f AddGroup'Report'
     fo3←'Courier New' 20 1 0 0 700
     gr.Attach←('Top' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     result←gr AddTextBox1''
     result.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo3
     result.ReadOnly←1
     result.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildChiSquare_ X;⎕TRAP;A                ⍝ Configuration function generated by FunctionForm
 Z←X                                        ⍝ Form or Subform object        7/31/2019
 ⎕TRAP←0 'E' '→1+⎕LC'                       ⍝ Ignore any problem
 A←X.Posn,X.Size                            ⍝ Note original size
 X.Configure 102 265 921 1644               ⍝ Form: fmF
 X.params.Configure 13 769 301 817          ⍝ Group: params
 X.params.g.Configure 19 5 269 801          ⍝ Grid: g
 X.params.g.lab.Configure 29 0 30 99        ⍝ Label: lab
 X.params.g.num.Configure 47 109 36 219     ⍝ Edit: num
 X.params.g.spi.Configure 47 109 36 219     ⍝ Spinner: spi
 X.params.g.edt.Configure 47 109 36 219     ⍝ Edit: edt
 X.params.g.char.Configure 500 500 36 274   ⍝ Edit: char
 X.syntax.Configure 8 27 286 718            ⍝ Group: syntax
 X.syntax.d.Configure 17 ¯1 257 709         ⍝ Grid: d
 X.syntax.d.lbl.Configure 0 0 30 199        ⍝ Label: lbl
 X.syntax.d.lbsig.Configure 59 51 33 166    ⍝ Label: lbsig
 X.syntax.d.sig.Configure 58 67 36 134      ⍝ Edit: sig
 X.syntax.d.lbdist.Configure 35 68 23 62    ⍝ Label: lbdist
 X.syntax.d.dist.Configure 36 49 31 99      ⍝ Combo: dist
 X.syntax.d.lboper.Configure 35 73 23 51    ⍝ Label: lboper
 X.syntax.d.oper.Configure 36 49 31 99      ⍝ Combo: oper
 X.syntax.d.lbdata.Configure 59 103 33 62   ⍝ Label: lbdata
 X.syntax.d.data.Configure 60 67 31 134     ⍝ Combo: data
 X.syntax.d.lbvartbl.Configure 59 77 33 114 ⍝ Label: lbvartbl
 X.syntax.d.vartbl.Configure 60 67 31 134   ⍝ Combo: vartbl
 X.syntax.d.lbtype.Configure 59 90 33 62    ⍝ Label: lbtype
 X.syntax.d.type.Configure 60 60 31 121     ⍝ Combo: type
 X.syntax.d.lbN.Configure 59 90 33 62       ⍝ Label: lbN
 X.syntax.d.N.Configure 58 60 36 121        ⍝ Spinner: N
 X.syntax.d.char.Configure 32 40 36 80      ⍝ Edit: char
 X.xg.Configure 324 27 59 1555              ⍝ Group: xg
 X.xg.lbexpr.Configure 11 2 23 85           ⍝ Label: lbexpr
 X.xg.expr.Configure 16 106 31 1422         ⍝ Edit: expr
 X.gr.Configure 401 26 507 1577             ⍝ Group: gr
 X.gr.result.Configure 31 19 462 1536       ⍝ Edit: result
 :If X.Type≢'Form'                          ⍝ Re-configure back...
     X.Configure A                          ⍝ ...to original specs
 :EndIf                                     ⍝
∇

 buildConfInt←{                            ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     T←'Confidence Interval Wizard'
     f←CreateForm(T~' ')T 1                      ⍝ Create Form
     f.Caption←T,'   ',copyright
     NS←⎕NS'' ⋄ NS.UserSpace←#
     NS.Levels←0.8 0.9 0.95 0.99
     NS.Event←'Init' ⋄ NS←confIntAPI NS
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Calculate'
     ms←mb AddMenuItem'Save Expression'
     mc.onSelect←'BuildExpr'NS
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←300 200 200 200 200
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←NS.Grid.Values
     d.onCellChanged←'onGridChange'NS
     D←d AddDropCombo''
     D.onMouseEnter←'OnSelectDrop'NS
     E←d AddDropEditCombo''
     E.onMouseEnter←'OnSelectDrop'NS
     N←d AddNumField''
     N.Limits←1 32767
     N.FormatString←'I6'
     N.FontObj←fo1
     F←d AddNumField''
     F.FormatString←'F9.3'
     F.FontObj←fo1
     T←d AddLabel''
     P←d AddNumField''
     P.FormatString←'Q<%>K2F8.2'
     P.FontObj←fo1
     d.CellFonts←'fo1'
     xg←f AddGroup'Expression'
     expr←xg AddEdit'Expression'
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     d.Input←,¨'TPDENF'
       ⍝  d.CellTypes←' TPDENF'⍳NS.Grid.Attributes.Type
     d.CellTypes←buildCellTypes NS.Grid.Attributes.Type
     gr←f AddGroup'Report'
     fo3←'Courier New' 20 1 0 0 700
     gr.Attach←('Top' 'Left' 'Bottom' 'Right')     ⍝ Attach the output to the form..
     result←gr AddTextBox1''
     result.Attach←('Top' 'Left' 'Bottom' 'Right') ⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo3
     result.ReadOnly←1
     result.BCol←¯16
     FinishForm f                                  ⍝ Post process form for size and posn
 }

∇ Z←buildConfInt_ X;⎕TRAP;A             ⍝ Configuration function generated by FunctionForm
 Z←X                                      ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                     ⍝ Ignore any problem
 A←X.Posn,X.Size                          ⍝ Note original size
 X.Configure 53 185 760 1237              ⍝ Form: HypothesisWizard
 X.syntax.Configure 8 26 208 1132         ⍝ Group: syntax
 X.syntax.d.Configure 18 11 177 1106      ⍝ Grid: d
 X.syntax.d.lbl.Configure 0 0 30 299      ⍝ Label: lbl
 X.syntax.d.lbsig.Configure 34 ¯57 33 218 ⍝ Label: lbsig
 X.syntax.d.sig.Configure 32 40 36 80     ⍝ Spinner: sig
 X.syntax.d.lbstat.Configure 30 27 33 127 ⍝ Label: lbstat
 X.syntax.d.stat.Configure 31 45 31 90    ⍝ Combo: stat
 X.syntax.d.lbdata.Configure 34 49 33 62  ⍝ Label: lbdata
 X.syntax.d.data.Configure 35 40 31 80    ⍝ Combo: data
 X.syntax.d.lbhs.Configure 34 23 33 114   ⍝ Label: lbhs
 X.syntax.d.hs.Configure 35 40 31 80      ⍝ Combo: hs
 X.syntax.d.lbrel.Configure 35 74 23 49   ⍝ Label: lbrel
 X.syntax.d.rel.Configure 36 49 31 99     ⍝ Combo: rel
 X.syntax.d.lbn.Configure 34 4 33 153     ⍝ Label: lbn
 X.syntax.d.n.Configure 32 40 36 80       ⍝ Spinner: n
 X.syntax.d.lbxbar.Configure 34 10 33 140 ⍝ Label: lbxbar
 X.syntax.d.xbar.Configure 32 40 36 80    ⍝ Edit: xbar
 X.syntax.d.lbs.Configure 34 36 33 88     ⍝ Label: lbs
 X.syntax.d.s.Configure 32 40 36 80       ⍝ Edit: s
 X.xg.Configure 230 26 70 1132            ⍝ Group: xg
 X.xg.lbexpr.Configure 108 149 23 200     ⍝ Label: lbexpr
 X.xg.expr.Configure 22 21 38 1087        ⍝ Edit: expr
 X.gr.Configure 314 26 412 1132           ⍝ Group: gr
 X.gr.result.Configure 26 15 353 1116     ⍝ Edit: result
 :If X.Type≢'Form'                        ⍝ Re-configure back...
     X.Configure A                        ⍝ ...to original specs
 :EndIf                                   ⍝
∇

 buildDist←{                             ⍝ Build Function
          ⍝⎕PATH←'##.GUI'                      ⍝ Look here for form designer
     ⎕ML←3 ⋄ ⎕IO←0
     f←CreateForm''                      ⍝ Create Form
     mb←f AddMenuBar''
     mg←mb AddMenuItem'Graph'
     mc←mb AddMenuItem'Calc'
     ms←mb AddMenuItem'Save Expression'
     mg.onSelect←'buildGraph'
     mc.onSelect←'BuildAndRun'
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     dist←'normal'
     f.DistTable←MakeDistributionTable''
     f.Caption←'Distribution Wizard ',copyright    ⍝ Caption
     params←f AddGroup'ParameterList'
     g←params AddGrid'ParameterList'
     g.Posn←15 5
     g.Size←150 440
     g.ColTitles←'Parameter' 'Value' 'Description'
     params.Posn←30 30
     params.Size←200 500
     g.CellWidths←150 100 350
     g.TitleWidth←0
     g.Values←2 3⍴'mu' 0 'Mean' 'sigma' 1 'Standard Deviation'
     nn←g.Values
     g.FontObj←fo1
     lab←g AddLabel''             ⍝ Parameter Names
     num←g AddNumField''          ⍝ Real numbers
     spi←g AddSpinner''           ⍝ Integers
     edt←g AddEdit''
     spi.Limits←1 1000
     spi.Bcol←0
     g.Input←'lab' 'num' 'spi' 'edt'
     g.CellFonts←'fo2' 'fo1' 'fo1' 'fo1'
     g.CellTypes←(⍴nn)⍴1 2 1
     g.BCol←¯16 0 0 0
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←200 300
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←4 2⍴'Distribution' 'normal' 'Operator' 'probability' 'Relation' '≤' 'Value' 0
     lbl←d AddLabel''
     dist←d AddDropCombo'Distribution'
     dist.FontObj←fo1
     dist.Items←{1↓⍵[;⍵[0;]⍳⊂'DISTRIBUTION']}f.DistTable
     dist.(SelItems←Items∊⊂'normal')
     dist.onSelect←'OnSelectDistribution'
     oper←d AddDropCombo'Operator'
     oper.onSelect←'OnSelectOperator'
     oper.FontObj←fo1
     oper.Items←'criticalValue' 'probability' 'randomVariable' 'theoretical'
     oper.SelItems←0 1 0 0
     rel←d AddDropCombo'Relation'
     rel.FontObj←fo1
     rel.Items←'<' '≤' '=' '≠' '>' '≥' 'in' 'between' 'outside'
     rel.(SelItems←Items∊'≤')
     rel.onSelect←'OnSelectRelation'
     float←d AddNumField'Value'
     float.FontObj←fo1
     float.Value←0
     float.FormatString←'M<->F20.5'
     int←d AddSpinner''
     int.Limits←1 500
     char←d AddEdit''
     d.Input←'lbl' 'dist' 'oper' 'rel' 'float' 'int' 'char'
     d.CellFonts←1 5/'fo2' 'fo1'
     d.CellTypes←1,[0.5]2 3 4 5
     xg←f AddGroup''
     expr←xg AddEdit'Expression'
     result←xg AddEdit'Result'
     xg.(result expr).FontObj←⊂fo1
     xg.(result expr).ReadOnly←1
     xg.(result expr).BCol←¯16
     gr←f AddGroup'Graph'
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildDist_ X;⎕TRAP;A                   ⍝ Configuration function generated by FunctionForm
 Z←X                                      ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                     ⍝ Ignore any problem
 A←X.Posn,X.Size                          ⍝ Note original size
 X.Configure 67 183 629 1217              ⍝ Form: fmF
 X.params.Configure 8 560 202 615         ⍝ Group: params
 X.params.g.Configure 19 4 165 601        ⍝ Grid: g
 X.params.g.lab.Configure 29 0 30 99      ⍝ Label: lab
 X.params.g.num.Configure 47 109 36 219   ⍝ Edit: num
 X.params.g.spi.Configure 47 109 36 219   ⍝ Spinner: spi
 X.params.g.edt.Configure 47 109 36 219   ⍝ Edit: edt
 X.syntax.Configure 8 26 200 521          ⍝ Group: syntax
 X.syntax.d.Configure 18 10 163 501       ⍝ Grid: d
 X.syntax.d.lbl.Configure 0 0 30 199      ⍝ Label: lbl
 X.syntax.d.lbdist.Configure 35 68 23 62  ⍝ Label: lbdist
 X.syntax.d.dist.Configure 36 49 31 99    ⍝ Combo: dist
 X.syntax.d.lboper.Configure 35 73 23 51  ⍝ Label: lboper
 X.syntax.d.oper.Configure 36 49 31 99    ⍝ Combo: oper
 X.syntax.d.lbrel.Configure 35 74 23 49   ⍝ Label: lbrel
 X.syntax.d.rel.Configure 36 49 31 99     ⍝ Combo: rel
 X.syntax.d.lbfloat.Configure 35 80 23 37 ⍝ Label: lbfloat
 X.syntax.d.float.Configure 36 49 20 99   ⍝ Edit: float
 X.syntax.d.int.Configure 36 49 20 99     ⍝ Spinner: int
 X.syntax.d.char.Configure 32 40 36 80    ⍝ Edit: char
 X.xg.Configure 218 26 90 1150            ⍝ Group: xg
 X.xg.lbexpr.Configure 12 2 23 61         ⍝ Label: lbexpr
 X.xg.expr.Configure 8 71 31 1054         ⍝ Edit: expr
 X.xg.lbresult.Configure 53 7 23 59       ⍝ Label: lbresult
 X.xg.result.Configure 49 71 31 1056      ⍝ Edit: result
 X.gr.Configure 310 26 306 1150           ⍝ Group: gr
 :If X.Type≢'Form'                        ⍝ Re-configure back...
     X.Configure A                        ⍝ ...to original specs
 :EndIf                                   ⍝
∇

 buildDistributionTable←{                            ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm''                   ⍝ Create Form
     f.Caption←'Distribution Table'      ⍝ Caption
     children←{⍺ ⍵ AddMenuItem ⍵'SYNTAX1'}¨∘#.TamStat.Util.toNestedVector
          ⍝ Create and populate the menu bar
     r c p←⍺        ⍝ Rows columns Planes
     d←⊂[0]⍵
     mb←f AddMenuBar''
     tc←f AddTabControl''
     tb←tc AddTab¨p
     g←tb AddGrid¨⊂''
     tb.g.RowTitles←⊂r
     tb.g.ColTitles←⊂c
     tb.g.Values←d
     FinishForm f                       ⍝ Post process form for size and posn
 }

 buildGraph←{
      ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
      ⍝∇ Build Graph for Distribution Wizard
      ⍝∊ User Interface
      ⍝⍵ Distribution Wizard Form
      ⍝← 1
      ⍝⍕ buildGraph NS
     ⎕ML←3 ⋄ ⎕IO←0                                  ⍝ Set system variables
     Z←BuildAndRun ⍵                                ⍝ Build TamStat expression and run it
     F←getform ⍵                                    ⍝ Distribution Wizard form
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     Parameters←F.params.g.Values[;⍳2]
     V←F.syntax.d.Values[;1]
     DistFn Operator Field3 Value←4↑V
     Value←{(b v)←⎕VFI⍕⍵ ⋄ ∧/b:v ⋄ ⍵}Value
     NS←⎕NS'Parameters' 'DistFn' 'Operator' 'Field3' 'Value'
     NS←DistAPI NS
          ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     inf←∨/'inf'⍷⊃{⍵[⍵[;0]⍳F.syntax.d.Values[0;1];⍵[0;]⍳'LOWER' 'UPPER']}F.DistTable   ⍝ Infinite?
     fn←⍎'##.Distribution.',↑F.syntax.d.Values[0;1] ⍝ Distribution function
     p←F.params.g.Values[;1]                        ⍝ Distribution parameters
     _←'F.gr.SF'⎕WC'SubForm' ''(20 75)(250 1000)    ⍝ Create subform to contain graph
     disc←⍎↑F.DistTable[F.DistTable[;0]⍳F.syntax.d.Values[0;1];1]
     op←↑F.syntax.d.Values[1;1]                     ⍝ If operator is randomVariable
     op≡'randomVariable':disc buildHist F           ⍝    build Histogram
     F.gr.SF.Coord←'Prop'                           ⍝
     _←'F.gr.SF.TB'⎕WC'TrackBar'(90 0)(10 100)('TickAlign' 'Top')('Limits' 0 100)('TickSpacing' 1)('Attach' 'Bottom' 'None' 'Bottom' 'None')
     cv←'criticalValue'≡↑F.syntax.d.Values[1;1]
     CS←NS.ChartSpecs
     CS←translate CS
     CS.Style≢'Curve':CS discreteChart F
     F.(Bounds YX)←CS.(Bounds YX)                   ⍝ Put coordinates into form
     _←'F.gr.SC'⎕WC'Label'(CS.Label)
     F.gr.SC.(Posn Size)←(280 0)(15 1100)           ⍝ Position, size for graph
     fo1←'Courier New' 20 1 0 0 700                 ⍝ Use fixed-width font
     F.gr.SC.FontObj←fo1                            ⍝
     _←'F.gr.SF.L1'⎕WC'Poly'CS.YX1                  ⍝ Lower tail of distribution
     _←'F.gr.SF.L2'⎕WC'Poly'CS.YX2                  ⍝ Middle of distribution
     _←'F.gr.SF.L3'⎕WC'Poly'CS.YX3                  ⍝ Upper tail of distribution
     F.gr.SF.(L1 L2 L3).FStyle←0
     F.gr.SF.(L1 L2 L3).FillCol←(195 195 195)(0 127 0)[CS.Shading] ⍝ Shade in appropriate segment
     G←fn GetValue                                  ⍝ Call back to retrieve value
     F.gr.SF.TB.Thumb←CS.Thumb[1]                   ⍝ Reset thumb
     F.gr.SF.TB.onThumbDrag←'G'p                    ⍝ Thumb drag method resets value
     _←⎕DQ'F'                                       ⍝
     0}

 buildGrid←{                             ⍝ Build Function
     ⎕PATH←'##.GUI'                      ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm''                      ⍝ Create Form
     mb←f AddMenuBar''
     mg←mb AddMenuItem'Create'
     mc←mb AddMenuItem'Edit'
     ms←mb AddMenuItem'Save'
     fo1←'Courier New' 24 1 0 0 700
     f.Caption←'TableEditor'
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←100
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←2 2⍴0
     ed←d AddEdit''
     d.Input←'ed'
     d.AutoExpand←1 1
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildGrid_ X;⎕TRAP;A             ⍝ Configuration function generated by FunctionForm
 Z←X                                ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'               ⍝ Ignore any problem
 A←X.Posn,X.Size                    ⍝ Note original size
 X.Configure 118 306 863 1355       ⍝ Form: fmF
 X.syntax.Configure 39 46 774 1292  ⍝ Group: syntax
 X.syntax.d.Configure 45 28 549 953 ⍝ Grid: d
 :If X.Type≢'Form'                  ⍝ Re-configure back...
     X.Configure A                  ⍝ ...to original specs
 :EndIf                             ⍝
∇

 buildHist←{
      ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
      ⍝∇ Build histogram to display randomVariable
      ⍝∊ Utility
      ⍝⍺ B: 0 = Continuous, 1 = discerte
      ⍝⍵ Distribution Wizard Form
      ⍝← 1
      ⍝⍕ B buildHist NS
     0::0                   ⍝ Error checkig
     ⎕IO←0 ⋄ ⎕ML←3
     ob←getobs ⍵            ⍝ Get objects
     X←⍎ob.expr.Value       ⍝ Execute
     H←⍺ histogram show X        ⍝
     tb←ob.SF AddTextBox H  ⍝ Create text box
     tb.Posn←1 1            ⍝ Put in upper left corner
     tb.Size←ob.SF.Size-2   ⍝ Fill entire subform
     fo←'Courier New' 10 1 0 0 700
     tb.FontObj←fo          ⍝ Use fixed-width font
     ⍵.gr.SC.Value←''       ⍝ Blank out scale if present
     1
 }

 buildHypothesis←{                            ⍝ Build Function
          ⍝⎕PATH←'##.GUI'                          ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3 ⋄ ⎕PP←5                            ⍝ Update
     T←'Hypothesis Wizard'
     f←CreateForm(T~' ')T 1                      ⍝ Create Form
     f.Caption←T,'   ',copyright
     mb←f AddMenuBar''
         ⍝ mp←mb AddMenuItem'Get Parameters'
     mc←mb AddMenuItem'Calculate Test Statistic'
     ms←mb AddMenuItem'Save Expression'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←300 200 200 200 200
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     NS←⎕NS''
     NS.UserSpace←#
     d.onCellChanged←'onGridChange'NS
     NS.Event←'Init'
     NS←hypothesisAPI NS
     mc.onSelect←'BuildExpr'NS
     ms.onSelect←'UpdateSession'
     d.Values←NS.Grid.Values
     D←d AddDropCombo''
     D.onMouseEnter←'OnSelectDrop'NS
     E←d AddDropEditCombo''
     E.onMouseEnter←'OnSelectDrop'NS
     N←d AddNumField''
     N.Limits←1 32767
     N.FormatString←'I6'
     N.FontObj←fo1
     F←d AddNumField''
     F.FormatString←'F9.3'
     F.FontObj←fo1
     T←d AddLabel''
     P←d AddNumField''
     P.FormatString←'Q<%>K2F7.3'
     P.FontObj←fo1
     d.Input←,¨'TPDENF'
          ⍝ d.CellTypes←' TPDENF'⍳NS.Grid.Attributes.Type
     d.CellTypes←buildCellTypes NS.Grid.Attributes.Type
     d.CellFonts←'fo1'
     xg←f AddGroup'Expression'
     expr←xg AddEdit'Expression'
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     gr←f AddGroup'Report'
     result←gr AddEditBox''
     result.FontObj←fo1
     result.ReadOnly←1
     result.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildHypothesis_ X;⎕TRAP;A         ⍝ Configuration function generated by FunctionForm
 Z←X                                  ⍝ Form or Subform object  8/14/2019
 ⎕TRAP←0 'E' '→1+⎕LC'                 ⍝ Ignore any problem
 A←X.Posn,X.Size                      ⍝ Note original size
 X.Configure 99 491 809 1237          ⍝ Form: HypothesisWizard
 X.syntax.Configure 8 26 208 1132     ⍝ Group: syntax
 X.syntax.d.Configure 18 11 177 1106  ⍝ Grid: d
 X.syntax.d.D.Configure 60 60 31 121  ⍝ Combo: D
 X.syntax.d.N.Configure 58 60 36 121  ⍝ Edit: N
 X.syntax.d.F.Configure 58 60 36 121  ⍝ Edit: F
 X.syntax.d.T.Configure 0 0 30 299    ⍝ Label: T
 X.syntax.d.P.Configure 58 60 36 121  ⍝ Edit: P
 X.xg.Configure 230 26 70 1132        ⍝ Group: xg
 X.xg.lbexpr.Configure 108 149 23 200 ⍝ Label: lbexpr
 X.xg.expr.Configure 22 21 38 1087    ⍝ Edit: expr
 X.gr.Configure 314 27 464 1132       ⍝ Group: gr
 X.gr.result.Configure 26 15 409 1116 ⍝ Edit: result
 :If X.Type≢'Form'                    ⍝ Re-configure back...
     X.Configure A                    ⍝ ...to original specs
 :EndIf                               ⍝
∇

 buildMultinomial←{                       ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     ⎕PATH←'#.TamStat.GUI'                        ⍝ Look here for form designer
     FF←CreateForm'Multi' 'Multinomial Properties'                ⍝ Create Form
     n←FF AddSpinner'Number of Values'
     n.Limits←1 20
     io←FF AddNumField'Starting Point'
     s←FF AddNumField'StepSize'
     r←FF AddRadioGroup'Type'('Character' 'Numeric')
     r.(Character Numeric).onSelect←⊂'SetMultiParm'
     i←r AddCheckBox'Sequential'
     (r.Numeric i).State←1
     (n io s).Value←4 1 1
     ok←FF AddButton'OK'
     ok.onSelect←'SetMultinomial'⍵
     _←FinishForm FF                         ⍝ Post process form for size and posn
     ⎕DQ'FF'
 }

∇ Z←buildMultinomial_ X;⎕TRAP;A  ⍝ Configuration function generated by FunctionForm
 Z←X                            ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'           ⍝ Ignore any problem
 A←X.Posn,X.Size                ⍝ Note original size
 X.Configure 193 574 209 616    ⍝ Form: Multi
 X.lbn.Configure 38 256 23 154  ⍝ Label: lbn
 X.n.Configure 39 434 24 114    ⍝ Spinner: n
 X.lbio.Configure 73 255 23 133 ⍝ Label: lbio
 X.io.Configure 74 434 24 113   ⍝ Edit: io
 X.lbs.Configure 110 260 23 112 ⍝ Label: lbs
 X.s.Configure 105 432 24 117   ⍝ Edit: s
 X.r.Configure 26 33 111 203    ⍝ Group: r
 X.r.i.Configure 67 55 23 132   ⍝ Button: i
 X.ok.Configure 152 377 23 111  ⍝ Button: ok
 :If X.Type≢'Form'              ⍝ Re-configure back...
     X.Configure A              ⍝ ...to original specs
 :EndIf                         ⍝
∇

 buildPredict←{                           ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     ⎕PATH←'##.GUI'                       ⍝ Look here for form designer
     T←'Prediction'
     f←CreateForm(T~' ')T 1               ⍝ Create Form
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Courier New' 20 1 0 0 700
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Predict'
     ms←mb AddMenuItem'Save Expression'
     mc.onSelect←'Predict'
     ms.onSelect←'UpdateSession'
     g←f AddGroup''
     g.Attach←'Top' 'left' 'Top' 'Right'
     g.FontObj←fo1
     mod←g AddDropEditCombo'Model Name'
     conf←g AddNumField'Confidence (%)'
     conf.Value←95
     cg←g AddCheckGroup'Output'('Point Estimate' 'Confidence Interval' 'Prediction Interval')
     equ←g AddEditBox'Equation'
     equ.FontObj←fo1
     equ.BCol←¯16
     equ.Attach←'Top' 'left' 'Top' 'Right'
     syntax←f AddGroup'Syntax'
     syntax.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d←syntax AddGrid''
     d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d.FontObj←fo1
     d.CellWidths←150
     out←d AddLabel''
     num←d AddNumField''
     char←d AddEdit''
     out.BCol←¯16
     d.Input←'num' 'char' 'out'
     d.FormatString←'M<->F10.2' '5A1' 'M<->F10.5'
     d.AutoExpand←1 0
        ⍝  d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d.onAddRow←'AddX'
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildPredict_ X;⎕TRAP;A               ⍝ Configuration function generated by FunctionForm
 Z←X                                     ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                    ⍝ Ignore any problem
 A←X.Posn,X.Size                         ⍝ Note original size
 X.Configure 75 247 699 1066             ⍝ Form: Prediction
 X.g.Configure 27 28 227 988             ⍝ Group: g
 X.g.lbmod.Configure 23 38 23 70         ⍝ Label: lbmod
 X.g.mod.Configure 20 150 31 345         ⍝ Combo: mod
 X.g.lbconf.Configure 79 44 23 210       ⍝ Label: lbconf
 X.g.conf.Configure 71 339 31 161        ⍝ Edit: conf
 X.g.cg.Configure 23 541 114 338         ⍝ Group: cg
 X.g.lbequ.Configure 155 26 23 117       ⍝ Label: lbequ
 X.g.equ.Configure 153 159 51 816        ⍝ Edit: equ
 X.syntax.Configure 278 31 380 949       ⍝ Group: syntax
 X.syntax.d.Configure 22 9 296 910       ⍝ Grid: d
 X.syntax.d.out.Configure 428 145 30 149 ⍝ Label: out
 X.syntax.d.num.Configure 428 115 36 99  ⍝ Edit: num
 :If X.Type≢'Form'                       ⍝ Re-configure back...
     X.Configure A                       ⍝ ...to original specs
 :EndIf                                  ⍝ ⍝
∇

 buildProb←{                        ⍝ Build Function
       ⍝   ⎕PATH←'##.GUI'                ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm''                 ⍝ Create Form
     NS←⎕NS''
     NS.Event←'Init'
     NS←probabilityAPI NS
     mb←f AddMenuBar''
     mg←mb AddMenuItem'Get Categories'
     mc←mb AddMenuItem'Calc'
     ms←mb AddMenuItem'Save Expression'
     mg.onSelect←'OnSelectRows'NS
     mc.onSelect←'RunProb'NS
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     fo3←'APL385 Unicode' 24 1 0 0 700
     dist←'normal'
     f.Caption←'Probability Wizard  ',copyright
     params←f AddGroup'Categories'
     params.Attach←Stretch←'Top' 'Left' 'Top' 'Right'
     g←params AddGrid'Categories'
     g.Attach←Stretch
     g.Posn←15 5
     g.Size←150 550
     params.Posn←30 30
     params.Size←200 500
     g.CellWidths←250 150 260
     g.TitleWidth←0
     g.TitleHeight←0
     g.Values←NS.Table
     g.FontObj←fo1
     lab←g AddLabel''             ⍝ Parameter Names
     num←g AddNumField''          ⍝ Real numbers
     num.FormatString←'F10.3'
     spi←g AddSpinner''           ⍝ Integers
     edt←g AddEdit''
     spi.Limits←1 1000
     spi.Bcol←0
     char←g AddEdit''
     char.onChange←'OnChangeTable'NS
     pct←g AddNumField''
     pct.FormatString←'Q<%>K2F7.2'
     g.Input←'lab' 'spi' 'num' 'char'
     g.CellFonts←'fo1'
     g.CellTypes←(⍴g.Values)⍴' TNXAQ'⍳NS.CellTypes
     g.BCol←¯16 0 0 0
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←300 200 200
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     d.Values←NS.Grid.Values
     lbl←d AddLabel''
     data←d AddDropEditCombo'Data'
     data.FontObj←fo1
     N←d AddSpinner'Rows'
     N.onSpin←'OnSelectRows'NS
     V←1 ##.Util.variables #
     data.Items←(⊂'frequency'),V
     data.onSelect←'OnSelectProbData'NS
     conj←d AddCombo'Conj'
     conj.FontObj←fo3
     conj.Items←NS.(Grid.Attributes get'Conj').Items
     conj.onSelect←'OnSelectConj'NS
     conj.onMouseDown←'OnSelectConj'NS
     cat←d AddDropEditCombo''
     cat.FontObj←fo1
     cat.onMouseDown←'OnSelectCategory'NS
     cat.onSelect←'OnSelectCategory'NS
     cat.Items←NS.(Grid.Attributes get'SetB').Items
     char←d AddEdit''
     rtop←d AddCombo'Right Operand'
     rtop.Items←'Table' 'independent'
     rtop.onSelect←'OnSelectRtop'NS
     pr←d AddNumField''
     d.Input←'lbl' 'N' 'data' 'cat' 'conj' 'rtop' 'pr'
     d.CellTypes←' TNED'⍳NS.Grid.Attributes.Type
     d.CellTypes[3;1 2]+←1  ⍝ Conj  and DescConj
     d.CellTypes[5;1]←6 ⍝ rtop
     xg←f AddGroup''
     expr←xg AddEdit'Expression'
     expr.Attach←Stretch  ⍝ Attach the output to the form..
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     fo3←'Courier New' 20 1 0 0 700
     xg.Attach←Stretch  ⍝ Attach the output to the form..
     result←xg AddEdit'Result'
     result.Attach←Stretch ⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo1
     result.ReadOnly←1
     result.BCol←¯16
     gr←f AddGroup'Graph'
     gr.Attach←Stretch      ⍝ Attach the output to the form..
     FinishForm f           ⍝ Post process form for size and posn
 }

∇ Z←buildProb_ X;⎕TRAP;A                    ⍝ Configuration function generated by FunctionForm
 Z←X                                       ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                      ⍝ Ignore any problem
 A←X.Posn,X.Size                           ⍝ Note original size
 X.Configure 142 332 1140 1830             ⍝ Form: fmF
 X.params.Configure 30 874 365 882         ⍝ Group: params
 X.params.g.Configure 47 30 278 828        ⍝ Grid: g
 X.params.g.lab.Configure ¯200 ¯500 30 249 ⍝ Label: lab
 X.params.g.num.Configure 43 137 36 274    ⍝ Edit: num
 X.params.g.spi.Configure 43 137 36 274    ⍝ Spinner: spi
 X.params.g.edt.Configure 43 137 36 274    ⍝ Edit: edt
 X.params.g.char.Configure 43 137 36 274   ⍝ Edit: char
 X.params.g.pct.Configure 43 137 36 274    ⍝ Edit: pct
 X.syntax.Configure 21 42 368 806          ⍝ Group: syntax
 X.syntax.d.Configure 35 28 312 731        ⍝ Grid: d
 X.syntax.d.lbl.Configure 0 0 30 199       ⍝ Label: lbl
 X.syntax.d.lbdata.Configure 59 90 33 62   ⍝ Label: lbdata
 X.syntax.d.data.Configure 60 60 31 121    ⍝ Combo: data
 X.syntax.d.lbN.Configure 59 90 33 62      ⍝ Label: lbN
 X.syntax.d.N.Configure 58 60 36 121       ⍝ Spinner: N
 X.syntax.d.lbconj.Configure 59 90 33 62   ⍝ Label: lbconj
 X.syntax.d.conj.Configure 60 60 32 121    ⍝ Combo: conj
 X.syntax.d.cat.Configure 60 60 31 121     ⍝ Combo: cat
 X.syntax.d.char.Configure 58 60 36 121    ⍝ Edit: char
 X.syntax.d.lbrtop.Configure 59 31 33 179  ⍝ Label: lbrtop
 X.syntax.d.rtop.Configure 60 60 31 121    ⍝ Combo: rtop
 X.xg.Configure 410 43 161 1712            ⍝ Group: xg
 X.xg.lbexpr.Configure 29 10 30 88         ⍝ Label: lbexpr
 X.xg.expr.Configure 37 127 36 1548        ⍝ Edit: expr
 X.xg.lbresult.Configure 101 25 30 107     ⍝ Label: lbresult
 X.xg.result.Configure 94 129 43 1549      ⍝ Edit: result
 X.gr.Configure 597 48 464 1704            ⍝ Group: gr
 :If X.Type≢'Form'                         ⍝ Re-configure back...
     X.Configure A                         ⍝ ...to original specs
 :EndIf                                    ⍝ Updated 9/22/2020
∇

 buildRegress←{                           ⍝ Build Function
     ⎕IO←0 ⋄ ⎕ML←3
     ⎕PATH←'##.GUI'                       ⍝ Look here for form designer
     T←'Regression Wizard'
     f←CreateForm(T~' ')T 1              ⍝ Create Form
     mb←f AddMenuBar''
     mp←mb AddMenuItem'Regress'
     mc←mb AddMenuItem'Predict'
     me←mb AddMenuItem'Plot Residuals'
     ms←mb AddMenuItem'Save Expression'
     mp.onSelect←'BuildRex'
     mc.onSelect←'PredictionWizard'
     me.onSelect←'PlotResiduals'
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     syntax.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←100 300 150 150 150 150
     cb←d AddCheckBox' '
     cb.onSelect←'OnChecked'
     d.ShowInput←1
     exp←d AddDropEditCombo''
     V←1 ##.Util.variables #
     exp.Items←V
     out←d AddLabel''
     num←d AddNumField''
     d.Input←'cb' 'exp' 'out' 'num'
     d.FormatString←'BF10.5'
     d.Values←11 6⍴0 ' ' 0 0 0 0
     d.Values[1 2;0]←1
     d.Values[1;1]←1
     d.CellTypes←11 6↑(3 2,5/3)⍪(1,6/3)⍪1 2 3 3 3 3 4⍪8 7⍴1,6/3
     d.ColTitles←'Include' 'Expression' 'Coefficient' 'Std Error' 'T' 'P'
     d.RowTitles←'Y' 'Int','X',¨1↓⎕D
     d.BCol←¯16 0 ¯16 0
     d.AutoExpand←1 0
     d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     d.onAddRow←'AddX'
     ANOVA←f AddGroup'ANOVA'
     ANOVA.Attach←('Bottom' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     a←ANOVA AddGrid''
     a.FontObj←fo1
     a.CellWidths←175
     a.TitleWidth←0
     a.FormatString←'BF14.5'
          ⍝ d.TitleHeight←0
     a.BCol←¯16 0 0 0 0 0
     a.ColTitles←'Source' 'SS' 'DF' 'MS' 'F' 'P'
     V←'Regression' 'Error' 'Total',3 5⍴0
     a.Values←V
     xg←f AddGroup''
     xg.Attach←('Bottom' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     expr←xg AddEdit'Model Generator'
     expr.Attach←('Top' 'Left' 'Top' 'Right')
     expr.BCol←¯16
     eq←xg AddEdit'Regression Equation'
     eq.Attach←('Top' 'Left' 'Bottom' 'Right')
     eq.BCol←¯16
     xg.FontObj←fo1
     xg.ReadOnly←1
     xg.BCol←¯16
     p←f AddGrid''
     p.FontObj←fo1
     p.CellWidths←250
     p.TitleWidth←0
     p.ColTitles←'S' 'R-Squared(%)' 'R-Sq-Adj(%)' 'Model Name'
     p.FormatString←'BF7.2'
     p.BCol←¯16 0 0 0 0 0
     p.Attach←('Bottom' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     out1←p AddLabel''
     mod←p AddEdit'MODEL'
     p.Values←1 4⍴0 0 0 'MODEL'
     p.CellTypes←1 7⍴1 1 1 2
     p.Input←'out1' 'mod'
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildRegress_ X;⎕TRAP;A              ⍝ Configuration function generated by FunctionForm
 Z←X                                    ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                   ⍝ Ignore any problem
 A←X.Posn,X.Size                        ⍝ Note original size
 X.Configure 100 100 724 1260          ⍝ Form: RegressionWizard
 X.syntax.Configure 5 19 255 1226       ⍝ Group: syntax
 X.syntax.d.Configure 17 19 262 1188    ⍝ Grid: d
 X.syntax.d.cb.Configure 29 100 30 49   ⍝ Button: cb
 X.syntax.d.exp.Configure 43 44 31 89   ⍝ Combo: exp
 X.syntax.d.out.Configure 400 998 33 49 ⍝ Label: out
 X.syntax.d.num.Configure 41 44 36 89   ⍝ Edit: num
 X.ANOVA.Configure 347 13 162 1225      ⍝ Group: ANOVA
 X.ANOVA.a.Configure 26 16 125 1149     ⍝ Grid: a
 X.xg.Configure 525 25 163 1204         ⍝ Group: xg
 X.xg.lbexpr.Configure 103 22 23 204    ⍝ Label: lbexpr
 X.xg.expr.Configure 97 309 31 872      ⍝ Edit: expr
 X.xg.lbeq.Configure 38 13 30 260       ⍝ Label: lbeq
 X.xg.eq.Configure 36 312 31 876        ⍝ Edit: eq
 X.p.Configure 271 33 65 1207           ⍝ Grid: p
 X.p.out1.Configure 28 0 30 199         ⍝ Label: out1
 X.p.lbmod.Configure 162 231 33 75      ⍝ Label: lbmod
 X.p.mod.Configure 161 134 36 269       ⍝ Edit: mod
 :If X.Type≢'Form'                      ⍝ Re-configure back...
     X.Configure A                      ⍝ ...to original specs
 :EndIf                                 ⍝
∇

 buildSampleSize←{                            ⍝ Build Function
         ⍝ ⎕PATH←'##.GUI'                          ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     T←'Sample Size Wizard'
     f←CreateForm(T~' ')T 1                      ⍝ Create Form
     f.Caption←T,'    ',copyright
     NS←⎕NS''
     NS.Event←'Init'
     NS←sampleSizeAPI NS
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Calculate'
     ms←mb AddMenuItem'Save Expression'
     mc.onSelect←'BuildSampSizeEx'NS
     ms.onSelect←'UpdateSession'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     syntax←f AddGroup'Syntax'
     d←syntax AddGrid''
     d.FontObj←fo1
     d.CellWidths←400 200
     d.TitleWidth←0
     d.TitleHeight←0
     d.BCol←¯16 0 0 0 0 0
     V←NS.Grid.Values
     d.Values←V
     lbl←d AddLabel''
     sig←d AddNumField''
     sig.FormatString←'Q<%>K2I15'
     sig.FontObj←fo1
     sig.Value←5
     stat←d AddDropCombo'Statistic'
     stat.FontObj←fo1
         ⍝ stat.Items←'mean' 'proportion' 'sdev' 'variance'
     stat.Items←NS.(Grid.Attributes get'Parameter').Items
     stat.(SelItems←Items∊⊂'mean')
     stat.onSelect←'OnSelectParameter'NS
     s←d AddNumField'StdDev'
     s.FormatString←'F20.5'
     int←d AddNumField'Size'
     int.FormatString←'I7'
     d.Input←'lbl' 'sig' 'stat' 's' 'int'
     d.CellFonts←'fo1'
     d.CellTypes←' TPDFN'⍳NS.Grid.Attributes.Type
     xg←f AddGroup'Expression'
     expr←xg AddEdit'Expression'
     expr.FontObj←fo1
     expr.ReadOnly←1
     expr.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildSampleSize_ X;⎕TRAP;A             ⍝ Configuration function generated by FunctionForm
 Z←X                                      ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                     ⍝ Ignore any problem
 A←X.Posn,X.Size                          ⍝ Note original size
 X.Configure 245 400 518 1041             ⍝ Form: SampleSizeWizard
 X.syntax.Configure 14 16 282 920         ⍝ Group: syntax
 X.syntax.d.Configure 28 39 232 841       ⍝ Grid: d
 X.syntax.d.lbl.Configure 3 1 30 299      ⍝ Label: lbl
 X.syntax.d.sig.Configure 28 45 36 90     ⍝ Edit: sig
 X.syntax.d.lbstat.Configure 30 27 33 127 ⍝ Label: lbstat
 X.syntax.d.stat.Configure 31 45 31 90    ⍝ Combo: stat
 X.syntax.d.lbs.Configure 30 46 33 88     ⍝ Label: lbs
 X.syntax.d.s.Configure 28 45 36 90       ⍝ Edit: s
 X.xg.Configure 355 13 52 753             ⍝ Group: xg
 X.xg.lbexpr.Configure 101 169 23 61      ⍝ Label: lbexpr
 X.xg.expr.Configure 18 20 24 713         ⍝ Edit: expr
 :If X.Type≢'Form'                        ⍝ Re-configure back...
     X.Configure A                        ⍝ ...to original specs
 :EndIf                                   ⍝ Build Form
∇

 buildSession←{                            ⍝ Build Function
        ⍝  ⎕PATH←'#.GUI'                        ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm ⍵ ⍵ 1                    ⍝ Create Form
     f.Caption←'TamStat   ',copyright      ⍝ Caption
     children←{⍺ ⍵ AddMenuItem ⍵'SYNTAX1'}¨∘#.TamStat.Util.toNestedVector
          ⍝ Create and populate the menu bar
     mb←f AddMenuBar''
        ⍝  tc←f AddTabControl''
     ⍝     ts←tc AddTab'Session'
     ⍝     tsf←tc AddTab'SummaryFunctions'
     ⍝     td←tc AddTab'Distributions'
     ⍝     tg←tc AddTab'Graphics'
     ⍝     tr←tc AddTab'Regression'
     m1←mb AddMenu'File'
     ml←m1 AddMenuItem'Load'
     msv←m1 AddMenuItem'Save'
     mi←m1 AddMenuItem'Import'
     mx←m1 AddMenuItem'Export'
     mi.onSelect←'##.Util.import'
     mx.onSelect←'##.Util.export'
     ml.onSelect←'##.Util.load'
     msv.onSelect←'##.Util.save'
     mo←mb AddMenu'Operators'
     mo1←mo children'probability,criticalValue,randomVariable,goodnessOfFit,sampleSize,confInt,hypothesis'
     mds←mb AddMenu'Descriptive Statistics'
     mg←mds AddMenuItem'Graphics'
     mg.onSelect←'buildChart'
     msw←mds AddMenuItem'Summary Wizard'
         ⍝ msw←ms AddMenuItem'Wizard'
     msw.onSelect←'buildSummary'
          ⍝mo←ms AddMenu'Measures of Quantity'
     ⍝     mo1←mo children'count,sum,product,sumProduct,sumSquares'
     ⍝     mc←ms AddMenu'Measures of Center'
     ⍝     mc1←mc children'mean,median,mode'
     ⍝     mss←ms AddMenu'Measures of Spread'
     ⍝     mss1←mss children'range,var,sdev,iqr'
     ⍝     mp←ms AddMenu'Measures of Position'
     ⍝     mp1←mp children'quartile,percentile,percentileRank,zScore'
     ⍝     msh←ms AddMenu'Measures of Shape'
     ⍝     msh1←msh children'skewness,kurtosis'
     ⍝     ma←ms AddMenu'Measures of Association'
     ⍝     ma1←ma children'covariance,correlation'
     mp←mb AddMenu'Probability'
     me←mp AddMenuItem'Probability Wizard'
     me.onSelect←'buildProb'
     mgb←mp AddMenuItem'Bayesian Statistics'
     mgb.onSelect←'buildBayes'
     md←mp AddMenuItem'Distributions'
     md.onSelect←'buildDist'
     mdt←mp AddMenuItem'Tables'
        ⍝  mdt1←mdt children'binomial,poisson,normal,chiSquare,tDist,fDist'
     mdt.onSelect←'buildTable'
     ⍝     md1←md AddMenu'Discrete'
     ⍝     dd←md1 children'binomial,geometric,hyperGeometric,poisson,multinomial,negativeBinomial,uniform'
     ⍝     md2←md AddMenu'Continuous'
     ⍝     dc←md2 children'rectangular,normal,chiSquare,tDist,fDist,triangular,beta,gamma,weibull,logNormal'
     ⍝     mr1←mb AddMenu'Relations'
     ⍝     mr2←mr1 children'eq,ne,lt,gt,le,ge,in,between,outside'
     ⍝     ml←mb AddMenu'Logical'
     ⍝     ml1←ml children'not,and,or,if'
     ⍝
     minf←mb AddMenu'Inference'
     mci←minf AddMenuItem'ConfidenceInterval'
     mci.onSelect←'buildConfInt'
     mss←minf AddMenuItem'SampleSize'
     mss.onSelect←'buildSampleSize'
     mh←minf AddMenuItem'HypothesisTests'
          ⍝mh←mh AddMenuItem'Wizard'
     mh.onSelect←'buildHypothesis'
     mt←mb AddMenu'Advanced Topics'
     mxy←mt AddMenuItem'Regression'
     mxy.onSelect←'buildRegress'
     ma←mt AddMenuItem'Anova'
     ma.onSelect←'buildAnova'
     mgf←mt AddMenuItem'Chi Square Tests'
     mgf.onSelect←'buildChiSquare'
     in←f AddCombo'Enter expression here and select "Execute" or press Enter:'
     in.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     in.onKeyPress←'checkEnter'
         ⍝ in.Attach←('None' 'None' 'None' 'Right')
          ⍝fo←'APL385 Unicode'
     fo←'Courier New' 24 1 0 0 700
     in.FontObj←fo
     g←f AddGroup'Output'
     g.Attach←('Top' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     out←g AddTextBox1''
     out.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     out.FontObj←fo
     out.ReadOnly←1
     mst←mb AddMenu'Settings'
     mf←mst AddMenu'Font'
     mf1←mf children'APL385_Unicode,APL_Large,Courier_New,Courier_New_Large,Lucida_Console,Lucida_Large'
     mf1.Checked←0 0 1 0 0 0
     mf1.onSelect←⊂'##.Util.SelectFont'
     mR←mst AddMenu'R Interface'
     mR1←mR children'Yes,No'
     mR1.onSelect←⊂'##.Util.RInterface'
     mR1.Checked←0 1
     msy←mst AddMenu'Syntax'
     msy1←msy children'APL,Standard'
     msy1.onSelect←⊂'##.Util.Standard'
     msy1.Checked←0 1
     mh0←mst AddMenu'Ho Conclusion'
     mh1←mh0 children'Hide,Unhide'
     mh1.Checked←1 0
     mh1.onSelect←⊂'##.Util.HideHo'
     mr←mb AddMenuItem'Execute'
     mr.onSelect←'RUN'
        ⍝  ms.onSelect←'SYNTAX'
     m3←mb AddMenu'Help'
     ms←m3 AddMenuItem'Syntax'
     mug←m3 AddMenuItem'User Guide'
     mrc←m3 AddMenuItem'Reference Card'
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildSession_ X;⎕TRAP;A         ⍝ Configuration function generated by FunctionForm
 Z←X                            ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'           ⍝ Ignore any problem
 A←X.Posn,X.Size                ⍝ Note original size
 X.Configure 86 191 573 1009    ⍝ Form: fmF
 X.lbin.Configure 15 18 28 600  ⍝ Label: lbin
 X.in.Configure 48 16 31 972    ⍝ Combo: in
 X.g.Configure 85 15 468 972    ⍝ Group: g
 X.g.out.Configure 15 8 441 961 ⍝ Edit: out
 :If X.Type≢'Form'              ⍝ Re-configure back...
     X.Configure A              ⍝ ...to original specs
 :EndIf                         ⍝
∇

 buildSummary←{                            ⍝ Build Function
         ⍝ ⎕PATH←'##.GUI'                       ⍝ Look here for form designer
     ⎕ML←3 ⋄ ⎕IO←0
     T←'Descriptive Statistics'
     f←CreateForm(T~' ')T 1                      ⍝ Create Form
     f.Caption←'Descriptive Statistics  ',copyright ⍝ Caption
     mb←f AddMenuBar''
     mc←mb AddMenuItem'Calculate'
     ms←mb AddMenuItem'Print'
     mc.onSelect←'CalcSummaryStats'
     fo1←'Courier New' 24 1 0 0 700
     fo2←'Times New Roman' 35 0 0 0 400
     st←f AddGroup'Statistics'
     st.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     st.FontObj←fo1
     exp←st AddDropEditCombo'Variable'
     V←1 ##.Util.variables #
     exp.Items←(1=≡¨⍎⍕'#.(1↓0 'V')')/V
     grp←st AddDropEditCombo'Grouping (Optional)'
     grp.Items←(2=≡¨⍎⍕'#.(1↓0 'V')')/V
     d←st AddGrid''
     d.FontObj←fo1
     d.CellWidths←5⍴250
     d.TitleWidth←0
     d.ColTitles←'Quantity' 'Center' 'Spread' 'Position' 'Shape'
     Quan←'count' 'sum' 'sumSquares' 'product'
     Cen←'mean' 'median' 'mode' 'stdErr'
     Spr←'var' 'sdev' 'range' 'iqr'
     Pos←'min' '1 quartile' '3 quartile' 'max'
     Shp←'skewness' 'kurtosis'
     cb←d AddCheckBox¨Quan,Cen,Spr,Pos,Shp
     ed←d AddEdit' '
     ed.Text←' '
     d.Input←cb,ed
     d.CellTypes←⍉5 4⍴19⌊1+⍳20
     d.Values←1 0 0 0,1 1 0 1,0 1 0 0,1 1 1 1,[0.5]0 0,'  '
     d.ShowInput←1
     d.CellFonts←'fo1'
     gr←f AddGroup'Report'
     result←gr AddTextBox1''
     gr.Attach←('Top' 'Left' 'Bottom' 'Right')  ⍝ Attach the output to the form..
     result.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     result.FontObj←fo1
     result.ReadOnly←1
     result.BCol←¯16
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildSummary_ X;⎕TRAP;A            ⍝ Configuration function generated by FunctionForm
 Z←X                                  ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                 ⍝ Ignore any problem
 A←X.Posn,X.Size                      ⍝ Note original size
 X.Configure 78 314 902 1388          ⍝ Form: DescriptiveStatistics
 X.st.Configure 25 34 281 1299        ⍝ Group: st
 X.st.lbexp.Configure 44 25 23 117    ⍝ Label: lbexp
 X.st.exp.Configure 43 213 31 364     ⍝ Combo: exp
 X.st.lbgrp.Configure 46 610 23 274   ⍝ Label: lbgrp
 X.st.grp.Configure 43 883 31 310     ⍝ Combo: grp
 X.st.d.Configure 96 15 157 1255      ⍝ Grid: d
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.cb.Configure 38 81 33 36      ⍝ Button: cb
 X.st.d.lbed.Configure 72 122 33 23   ⍝ Label: lbed
 X.st.d.ed.Configure 37 49 36 99      ⍝ Edit: ed
 X.gr.Configure 316 31 547 1299       ⍝ Group: gr
 X.gr.result.Configure 29 18 499 1244 ⍝ Edit: result
 :If X.Type≢'Form'                    ⍝ Re-configure back...
     X.Configure A                    ⍝ ...to original specs
 :EndIf                               ⍝
∇

 buildTable←{                             ⍝ Build Function
          ⍝⎕PATH←'##.GUI'                      ⍝ Look here for form designer
     ⎕IO←0 ⋄ ⎕ML←3
     f←CreateForm''                             ⍝ Create form.
     mb←f AddMenuBar''
         ⍝ mg←mb AddMenuItem'Graph'
     mc←mb AddMenuItem'Calc'
     ms←mb AddMenuItem'Save Expression'
     mc.onSelect←'makeStatTable'     ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     ms.onSelect←'UpdateSession'
     f.Caption←'Table'
     fo1←'Courier New' 24 1 0 0 700
     xg←f AddGroup'Expression'
     expr←xg AddEdit''
     p←f AddGrid''
     p.FontObj←fo1
     p.CellWidths←200
     p.CellHeights←30
     p.TitleHeight←0
     p.TitleWidth←0
     p.Values←5 2⍴'Distribution' 'normal' 'Operator' 'probability' 'Relation' '<' 'Rows' '0 to 3.3,0.1' 'Columns' '0 to .09,.01'
     dist←p AddDropCombo'Distribution'
     dist.onSelect←'OnSelectDistributionTable'   ⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝⍝
     lbl←p AddLabel''
     dist.FontObj←fo1
     lbl.FontObj←fo1
     expr.FontObj←fo1
     dist.Items←'binomial' 'normal' 'tDist' 'fDist' 'chiSquare' 'poisson'
     dist.SelItems←0 1 0 0 0 0
     oper←p AddDropCombo'Operator'
     oper.Items←'probability' 'criticalValue'
     rel←p AddDropCombo'Relation'
     rel.Items←'<' '≤' '>' '≥' '=' '≠' 'between' 'outside'
     rel.onSelect←'makeStatTable'
     ed←p AddEdit''
     p.Input←'lbl' 'dist' 'oper' 'rel' 'ed'
     p.CellTypes←5 2⍴1 2 1 3 1 4 1 5 1 5
     g←f AddGroup''
     sf←g AddSubForm''
     rd←f AddLabel'z'  ⍝ Row Description
     cd←f AddLabel'Second Decimal Place in z' ⍝ Column Description
     d←f AddGrid'' 1
     d.FormatString←'F8.4'
     g.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     sf.Attach←('Top' 'Left' 'Top' 'Right')  ⍝ Attach the output to the form..
     xg.Attach←('Top' 'Left' 'Top' 'Right')⍝..to allow the scroll bars to expand with the form
     expr.Attach←('Top' 'Left' 'Top' 'Right')⍝..to allow the scroll bars to expand with the form
     d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     FinishForm f                       ⍝ Post process form for size and posn
 }

∇ Z←buildTable_ X;⎕TRAP;A             ⍝ Configuration function generated by FunctionForm
 Z←X                                 ⍝ Form or Subform object
 ⎕TRAP←0 'E' '→1+⎕LC'                ⍝ Ignore any problem
 A←X.Posn,X.Size                     ⍝ Note original size
 X.Configure 172 323 948 1174        ⍝ Form: fmF
 X.xg.Configure 198 13 75 1127       ⍝ Group: xg
 X.xg.expr.Configure 22 11 39 1109   ⍝ Edit: expr
 X.p.Configure 22 26 167 409         ⍝ Grid: p
 X.p.lbdist.Configure 1000 168 23 62 ⍝ Label: lbdist
 X.p.dist.Configure 1000 99 31 199   ⍝ Combo: dist
 X.p.lbl.Configure 2 406 20 99       ⍝ Label: lbl
 X.p.lboper.Configure 164 232 30 73  ⍝ Label: lboper
 X.p.oper.Configure 165 134 28 269   ⍝ Combo: oper
 X.p.lbrel.Configure 164 234 30 69   ⍝ Label: lbrel
 X.p.rel.Configure 165 134 28 269    ⍝ Combo: rel
 X.p.ed.Configure 163 134 32 269     ⍝ Edit: ed
 X.g.Configure 25 465 200 600        ⍝ Group: g
 X.rd.Configure 267 35 30 186        ⍝ Label: rd
 X.cd.Configure 273 447 30 379       ⍝ Label: cd
 X.d.Configure 315 26 607 1110       ⍝ Grid: d
 :If X.Type≢'Form'                   ⍝ Re-configure back...
     X.Configure A                   ⍝ ...to original specs
 :EndIf                              ⍝
∇

∇ Z←NS buildVenn F;fo1;Conj;BB;O;A1;B1;AB;CO;Green;Grey;SA;SAB;SB;S0;S1;Red;Mon;TXT
      ⍝⍟ Copyright (C) 2020 by Stephen M. Mansour
      ⍝∇ Build Venn Diagram for Probability Wizard
      ⍝∊ Namespace
      ⍝⍵ Distribution Wizard Form
      ⍝← 0
      ⍝⍕ buildGraph NS
 ⎕ML←3 ⋄ ⎕IO←0                                  ⍝ Set system variables
 'F.gr.SF'⎕WC'SubForm' ''(20 20)(500 1650)      ⍝ Create subform to contain graph
 fo1←'Courier New' 50 1 0 0 700                 ⍝ Use fixed-width font
 F.gr.SF.FontObj←fo1                            ⍝
 Conj←NS.get'Conj'
 :If 4=≢NS.Venn
     BB←2 1 1 1/NS.Venn[;0]
     O A1 B1 AB←⍕¨NS.Venn[;1]
     CO←{(↑⍵),1↓⍵}NS.Venn[;2]
 :Else
     BB←2 ¯1 2\NS.Venn[;0]
     O A1 B1 AB←⍕¨1 0 1 0\NS.Venn[;1]
     CO←↑,/NS.Venn[;2]
 :EndIf
 Green Grey←(0 127 0)(3⍴195)                    ⍝ Color definitions
 SA←'F.gr.SF.SA'⎕WC'Poly'(2⊃CO)                 ⍝ Draw circles for Venn Diagrams
 SAB←'F.gr.SF.SAB'⎕WC'Poly'(4⊃CO)
 SB←'F.gr.SF.SB'⎕WC'Poly'(3⊃CO)
 S0←'F.gr.SF.S0'⎕WC'Poly'(0⊃CO)
 S1←'F.gr.SF.S1'⎕WC'Poly'(1⊃CO)
 S0 S1 ⎕WS¨⊂'LStyle' 5
 SA SB ⎕WS¨⊂'LWidth' 5
 S0 S1 SA SB SAB ⎕WS¨(⊂⊂'FStyle'),¨3 2/(-'|'=↑Conj),0
 S0 S1 SA SB SAB ⎕WS¨(⊂⊂'FillCol'),¨Grey Green[0⌈BB]
     ⍝ Red←'FCol' 255 0 0
     ⍝ Red←'FCol'(0 0 0)
     
 'F.gr.SF.A'⎕WC'Label'A1(175 100)('FCol'(3/255×1=BB[2]))
 'F.gr.SF.AB'⎕WC'Text'AB(175 250)('FCol'(3/BB[4]×255))
 'F.gr.SF.B'⎕WC'Label'B1(175 450)('FCol'(3/BB[3]×255))
     ⍝F.gr.SF.(A AB B)⎕WS¨(⊂⊂'BCol'),¨SA SAB SB ⎕WG¨⊂'FillCol'
 F.gr.SF.(AB B)⎕WS¨(⊂⊂'BCol'),¨SAB SB ⎕WG¨⊂'FillCol'
 :If BB[2]≥0 ⋄ F.gr.SF.A ⎕WS'BCol'(SA ⎕WG'FillCol') ⋄ :EndIf
     ⍝ Mon←' '∧.=NS.get'SetA'
 Mon←'[None]'≡NS.get'SetA'
 TXT←('⍱'⎕R'~∨')('⍲'⎕R'~∧')('⊢'⎕R'├─')('⊣'⎕R'─┤')↑NS.VennText
 'F.gr.SF.Def'⎕WC'Text'TXT(20 700)
 'F.gr.SF.Set'⎕WC'Rect'((120 180)700)(30 50)
 'F.gr.SF.Set'⎕WS('FStyle' 0)('FillCol'Green Grey)
 'F.gr.SF.Text'⎕WC'Text'(⊃NS.VennText[1 2])(120 770)
 :If Mon           ⍝ If Monadic, suppress SetA
     S0 S1 SA ⎕WS¨⊂(⊂'FillCol'),NS.Venn[0;0]⊃Grey Green
     SAB SB ⎕WS¨⊂(⊂'FillCol'),NS.Venn[1;0]⊃Grey Green
     SA SAB SB ⎕WS¨⊂'LStyle' 5
     F.gr.SF.A ⎕WS'BCol'(SA ⎕WG'FillCol')
 :EndIf
      ⍝TXT←↑⌽4↑NS.VennText
 TXT←3↓NS.VennText
 'F.gr.SF.ME'⎕WC'Text'(⊃' ',TXT)(220 700)
 Z←0
∇

 calcBayes←{
           ⍝_←ShowStats ⍵
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     V←f.syntax.d.Values
     NS←⎕NS''
     NS.Events←V[;0]
     NS.Prior←V[;1]
     NS.Conditional←V[;2]
     NS.Event←'Run'
     NS←BayesAPI NS
     f.syntax.d.Values[;3]←NS.Joint
     f.syntax.d.Values[;4]←NS.Posterior
     T←+⌿0 1↓f.syntax.d.Values
     f.p.Values[0;1 3 4]←T[0 2 3]
     f.xg.expr.Value←NS.Expr
     1
 }

 calcPropVar←{
     ⎕IO←0 ⋄ ⎕ML←3
     g←⍎↑⍵                           ⍝ Grid values
     ⍺←0
     h←g.Values[2;2]≡⊂'hypothesis':⍺{              ⍝ If hypothesis tes
         i j←⍵[2 3]-1                                 ⍝ Current cell indices
         ⍺.Event←↑⍺.Grid.Names[i;j]                 ⍝ Event is cell name
         ⍺.Grid.Values←⍺.Event ⍺.put g.Values[i;j]  ⍝ Update cell
         NS←hypothesisAPI ⍺                        ⍝ Do the math
         g.Values←NS.Grid.Values                    ⍝ Update grid
         g.CellTypes←' TPDIF'⍳NS.Grid.Attributes.Types
         0}⍵
     i j←⍵[2 3]
     ⍺.Event←↑⍺.Grid.Names[i;j]
     ⍺.GridValues←⍺.Event ⍺.put g.Values[i;j]  ⍝ Update cell indices
     NS←confIntAPI ⍺
     g.Values←NS.Grid.Values
     g.CellTypes←' TQPDELNXSnxsq'⍳NS.GridTypes
     1
 }

 checkEnter←{
     ob ev code char keynum shift←⍵
         ⍝ 'ER'≡code:{ok←RUN #.fmF.mb.mr'Select' ⋄ 0}'' ⍝ if the user pressed enter, then RUN
         ⍝'ER'≡code:{ok←RUN fmF.mb.mr'Select' ⋄ 0}'' ⍝ if the user pressed enter, then RUN
     'ER'≡code:{ok←RUN SessionForm.mb.mr'Select' ⋄ 0}'' ⍝ if the user pressed enter, then RUN
     ⍵
 }

 discreteChart←{
      ⍝ Build a graph for a discrete distribution using rectangles
      ⍝⍵ Form
     ⎕IO←0 ⋄ ⎕ML←3
     F←⍵                            ⍝ Get form
     F.gr.SF.TB.Limits←⍺.Bounds
     F.gr.SF.TB.Posn+←0,⍺.Width÷2
     F.gr.SF.TB.Size-←0,⍺.Width
     _←'F.gr.SF.R1'⎕WC(⊂'Rect'),⍺.Rect
     F.gr.SF.TB.Thumb←⍺.Thumb
     _←'F.gr.SC'⎕WC'Label'⍺.Label
     fo1←'Courier New'(20-2×⍺.N=20)1 0 0 700
     F.gr.SC.FontObj←fo1
     F.gr.SC.Posn←280,(⍺.N=5 10 20 25 50)/180 135 100 100 100
     F.gr.SC.Size←15 900
     F.gr.SF.TB.onThumbDrag←'GetValueD'
     F.gr.SF.R1.FStyle←0
     F.gr.SF.R1.FillCol←(195 195 195)(0 127 0)[⍺.Shading]
     1
 }

 editDatabase←{
     ⎕IO←0 ⋄ ⎕ML←3
     h x c←{2=⎕NC'⍵':{h←toNestedVector ⍵
             ti←'&'  ⍝ Text indicator
             c←ti∊¨h
             x←1 1∘.⊢(0 ' ')[c]
             (h~¨ti)x c}⍵
         h←toNestedVector ⍵.⎕NL 2
         x←⍉⊃⍎⍕'⍵.('h')'
         c←80=⎕DR¨x[0;]
         h x c}⍵
     f←CreateForm''           ⍝ Create Form
     db←(0,≢h)⍴0
     GetDatabase←{
         ob←↑⍵
         db⍪←ob.d.Values ⋄ 1}
     Quit←{db⍪←x ⋄ d.Close}
     f.Caption←'Database Editor'
     f.onClose←'GetDatabase'h
     d←f AddGrid''
     d.Posn←20 10
     d.Size←600 1000
     fo1←'Courier New' 24 1 0 0 700
     d.FontObj←fo1
     d.CellWidths←100
     d.ColTitles←h
     d.TitleWidth←50
     d.AutoExpand←1 0
     d.Values←x
     num←d AddNumField''
     char←d AddEdit''
     d.Input←'num' 'char'
     d.CellTypes←(⍴x)⍴c+1
     d.Attach←('Top' 'Left' 'Bottom' 'Right')⍝..to allow the scroll bars to expand with the form
     z←FinishForm f                       ⍝ Post process form fo
     z←⎕DQ'f'
     b←{0≠↑0⍴⍵}¨db[0;]
     (b/db)←,¨b/db
     x←↓⍉db
     _←⍎⍕h,'←x'
     _←⎕EX'Database'
     _←'Database'⎕NS h
     Database
 }

 editTable←{
          ⍝⍺ Decimal places (default 0)
          ⍝⍵ Character vector, nested vector or Table
     ⎕IO←0 ⋄ ⎕ML←3
     V←'Value'
     w←{1=⍴⍴⍵:{1=≡⍵:⍵ V ⋄ ⍵}⍵
         2=↑⌽⍴⍵:'*'V⍪⍵ ⋄ ⍵}⍵
     ⍺←{2=⍴⍴⍵:↑⍵ ⋄ '*'}w
     r c x←{2=⍴⍴⍵:(1↓¨(⍵[;0])(⍵[0;])),⊂1 1↓⍵
         s←≢¨r c←toNestedVector¨⍵
         r c(s⍴0)}w
     f←CreateForm''                      ⍝ Create Form
     Table←(c,⍨⊂⍺)⍪r,x                   ⍝ Callback function
     GetMatrix←{(1 1↓Table)←f.d.Values ⋄ 1}
     f.Caption←'TableEditor:  ',⍺
     f.onClose←'GetMatrix'
     d←f AddGrid''
     d.Posn←20 10
     d.Size←600 1000
     fo1←'Courier New' 24 1 0 0 700
     d.FontObj←fo1
     d.CellWidths←100
     d.RowTitles←,⍕¨r
     d.ColTitles←,⍕¨c
     d.Values←x
     ed←d AddNumField''
     d.Input←'ed'
     z←FinishForm f                       ⍝ Post process form
     z←⎕DQ'f'
     (Table[0;]≡'*'V)↓Table
 }

 makeBinomialTable←{
     ⍝⍺⍺ relational symbol
     ⍝⍺ vector of sample sizes (n)
     ⍝⍵ vector of probabilities (p)
     ⎕IO←0 ⋄ ⎕ML←3   ⍝ Set system variables
     f←⍵
     _←{⎕EX'f.g.sf.L',⍵}¨'123'
     f.rd.Caption←' n  ,  x'
     f.cd.Caption←'Probability of Success'
     V←f.p.Values
     dist op rel row col←V[;1]
     ex←'{⍺ ⍵ binomial prob ',rel,'⍳ ⍺+1}'
     ex←'⍉⊃,⌿(',row,')∘.',ex,col
     r←{⍵,[0.5]⍳⍵+1}¨⍎row
     r←'P<n=>I4,<, >,P<x=>LI4'⎕FMT↑⍪/r
     f.d.RowTitles←↓r
     f.d.ColTitles←⍕¨⍎col
     f.xg.expr.Value←ex
     f.d.Values←⍎ex
     makeStatGraph f
 }

 makeStatGraph←{
     ⍝⍵ Form
     ⎕IO←0 ⋄ ⎕ML←3
     f←⍵
     V←⍵.p.Values
          ⍝fn oper rel←V[0 1 2;1]
     _←⎕EX¨'f.g.sf.'∘,¨'L1' 'L2' 'L3' 'R1'          ⍝ Clear graphics
     cv←'criticalValue'≡↑V[1;1]                     ⍝ Critical Value
     r←⍎(cv/'~'),↑V[2;1]                            ⍝ Relation
     NS←r{⍵≡'normal':translate normal coords ⍺⍺ 1              ⍝ Obtain coordinates
         ⍵≡'tDist':translate 5 tDist coords ⍺⍺ 1
         ⍵≡'chiSquare':translate 5 chiSquare coords ⍺⍺ 10
         ⍵≡'fDist':translate 5 9 fDist coords ⍺⍺ 4
         ⍵≡'binomial':translate 5 0.2 binomial coords ⍺⍺ 2
         ⍵≡'poisson':translate 5 poisson coords ⍺⍺ 2
         1}↑V[0;1]                                   ⍝fn
     2=⎕NC'NS.Rect':{_←'f.g.sf.R1'⎕WC(⊂'Rect'),⍵.Rect×2  ⍝ IF discrete, use rectangle
         f.g.sf.R1.FStyle←¯1 0[⍵.Shading]}NS
     ar←{2 5×[1]⍵}                                   ⍝ Aspect Ratio
     _←'f.g.sf.L1'⎕WC'Poly'(ar NS.YX1)               ⍝ Lower tail of distribution
     _←'f.g.sf.L2'⎕WC'Poly'(ar NS.YX2)               ⍝ Middle of distribution
     _←'f.g.sf.L3'⎕WC'Poly'(ar NS.YX3)               ⍝ Upper tail of distribution
     f.g.sf.(L1 L2 L3).FStyle←¯1 0[NS.Shading]
     0
 }

 makeStatTable←{
          ⍝⍺⍺ Distribution function expression
          ⍝⍺ Left argument (defaults to right argument): rows of table
          ⍝⍵ Right argument                              columns of table
          ⍝← Table
     ⎕IO←0 ⋄ ⎕ML←3
     f←getform ⍵
     V←f.p.Values
     P←⎕NS''
     P.(Dist Operator Relation Rows Columns)←V[;1]
     ns←StatTableAPI P
     f.d.(RowTitles ColTitles)←ns.(RowTitles ColTitles)
     f.xg.expr.Value←ns.Expression
     f.d.Values←ns.Table
     b←f.p.dist.SelItems
     pr←(↑f.p.rel.SelItems/2 2 4/'Upper' 'Lower' 'Two'),'-Tail Probability'
     f.rd.Caption←↑b/' n   x' '    z' '    D.F.' 'Denominator D.F' 'D.F' 'Lambda'
     cd←'Probability of Success' 'Second Decimal Place in z'
     cd,←3⍴pr'Numerator Degrees of Freedom'
     cd,←⊂'x'
     f.cd.Caption←↑b/cd
     makeStatGraph f
     1
 }

 onGridChange←{
     ⎕IO←0 ⋄ ⎕ML←3 ⋄ ⎕PP←5
     (ob ev r c d)←⍵
     r c←r c-ob.⎕IO
     f←getform ob                   ⍝ Get form
     A←↑⍺.Grid.Attributes[r;c]      ⍝ Get attributes
     f.xg.expr.Value←''             ⍝ Clear old message
     ok←A{6::1 ⋄ ⍺.validate ⍵}d     ⍝ Validate
     ~ok:f.xg.expr.Value←A.ErrorMsg ⍝ New error message
     ⍺.Grid.Values[r;c]←⊂d          ⍝ Populate the grid
     Name←↑⍺.Grid.Names[r;c]
     ⍺.Event←'Select'
     ⍺.EventArg←Name
     NS←{'hypothesis'≡⍵.get'Operator':hypothesisAPI ⍵
         ⍵.Levels←⍵.get'Level'∘,¨'1234'
         confIntAPI ⍵}⍺
     ob.Values←NS.Grid.Values
         ⍝ ob.##.CellTypes←buildCellTypes NS.Grid.Attributes.Type
     ob.CellTypes←buildCellTypes NS.Grid.Attributes.Type
 }

∇ Z←NS onHypothesisData X;S;f;ob;d;r;txt;b;Y;sf
         ⍝ Get Parameter List from Distribution
 ⎕IO←0 ⋄ ⎕ML←3
 f←##.GUI.getform X
 ob←↑X
 d←f.syntax.d
 S←('Sample2'≡(⊂d.CurCell)⊃NS.GridNames)/'2'
 NS.GridValues←('Sample',S)NS.put ob.Text
 NS.Event←'Select'
 NS←hypothesisAPI NS
 d.Values←NS.GridValues
 d.CellTypes←' TQPDELNXSnxsqR'⍳NS.GridTypes
∇

∇ z←NS onSelectData X;f;ob;d;r;txt;b;Y;sf;NS;⎕IO;⎕ML
      ⍝ For ConfInt
 ⎕IO←0 ⋄ ⎕ML←3
         ⍝ Get Parameter List from Distribution
 f←##.GUI.getform X
 ob←↑X
 d←f.syntax.d
 sf←↑d.Values[2;1]
 r←d.CurCell
 NS.Event←'Select'
 NS.GridValues←(↑r⌷NS.GridNames)NS.put ob.Text
 NS.UserSpace←'#'
 NS←confIntAPI NS
 d.CellTypes←' TQPDELNXSnxsq'⍳NS.GridTypes
 d.Values←NS.GridValues
 z←1
∇

 onSelectStat←{
         ⍝ Get Parameter List from Distribution for confindence intervals
     ⎕IO←0 ⋄ ⎕ML←3
     ⎕IO←0 ⋄ ⎕ML←3
     f←##.GUI.getform ⍵
     ob←↑⍵
     d←f.syntax.d
     ⍺.Event←'Select'
          ⍝NS.Parameter←↑ob.(SelItems/Items)
     ⍺.GridValues←'Parameter'⍺.put↑ob.(SelItems/Items)
     NS←confIntAPI ⍺
     d.Values←NS.GridValues
     d.CellTypes←' TQPDELNXSnxsq'⍳NS.GridTypes
     1
 }

∇ reset
∇

∇ syntax
∇

 translate←{
      ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
      ⍝∇ Translate distribution density coordinates
      ⍝∊ Utility
      ⍝⍺ Distribution Parameters
      ⍝⍺⍺ Distribution
      ⍝⍵ Namespace
      ⍝← 2-column matrix
      ⍝⍕  M ← P(fD translate) L U
     ⎕IO←0 ⋄ ⎕ML←3                                ⍝ Set system variables
     ⍵.Style≢'Curve':{P←⍵.YX[;0]
         M←90×P÷⌈/P                               ⍝ Get relative heights
         Width←W←100÷N←≢P                         ⍝ Widths
         Rect←((90-M)((W÷4)+W×⍳≢M))(M(W÷2))       ⍝ Rectangle coordinates
         NS←⍵
         _←'NS'⎕NS'Width' 'Rect' 'N' ⋄ NS}⍵
     y x←↓⍉⍵.YX                                   ⍝ Unpack coordinates
     lb ub←⍵.Bounds
     r←(⌈/-⌊/)x                                   ⍝ Range
     X←100×{⍵-⌊/⍵}x÷r                             ⍝ Translated domain values
     Y←5+{95×1-⍵÷⌈/⍵}y                            ⍝ Translated range values
     X←0,X,100                                    ⍝ Use entire width of window
     Y←0.9×100,Y,100                              ⍝ Leave vertical space for TrackBar, Values
     YX←⍉⊃Y X                                     ⍝ Get Y and X coordinates
     Thumb←2⍴100⌊⌈0.5+100×(lb-⍵.Thumb)÷lb-ub      ⍝ Get relative thumb value
     B←90,[0.5]Thumb-1                            ⍝
     YX1←((Thumb[0]+1)↑YX)⍪B[0;]                  ⍝ Lower section
     YX2←B[0;]⍪((Thumb[1]-102)↓Thumb[0]↓YX)⍪B[1;] ⍝ Middle Section
     YX3←B[1;]⍪Thumb[1]↓YX                        ⍝ Upper Section
     NS←⍵
     _←'NS'⎕NS'Thumb' 'YX1' 'YX2' 'YX3' 'YX'
     NS
 }

 GetValue←{
    ⍝ Z←BuildAndRun ⍵
     ⎕IO←0 ⋄ ⎕ML←3
     F←##.GUI.getform ⍵
     R←--/F.gr.SF.TB.Limits
     Th←F.gr.SF.TB.Thumb
     lb ub←F.Bounds
     X←lb+(ub-lb)×Th÷R
     V←F.syntax.d.Values
     b←V[2;1]∊'between' 'outside'
     V[3;1]←⍺ ⍺⍺{pr←V[1;1]≡⊂'probability' ⍝ Find critical value
         pr∧~b:⍵
        ⍝ pr∧b:⍵{⍵:¯1 1×⍺ ⋄ V[3;1],⍺}0=+/V[3 4;1]
         pr∧b:⊂⍕⍵{1=≢⍵:⍺ ⋄ ⍵[0],⍺}⍎⍕V[3;1]
         V[2;1]∊'>' '≥':⍺ ⍺⍺ probability≤⍵
         V[2;1]∊'<' '≤':⍺ ⍺⍺ probability≥⍵
         ⍝'≠'=↑V[2;1]:2×⍺ ⍺⍺ probability>⍵
         V[2;1]∊(,'≠')'≠' 'between':2×⍺ ⍺⍺ probability>⍵
         1-2×⍺ ⍺⍺ probability>⍵}X
     F.syntax.d.Values←V
     Z←BuildAndRun ⍵
     fn←⍺⍺
     Th←⌈0.5+100×(lb-⍺ Z(fn getXCoords)V)÷lb-ub
     B←90,[0.5]Th-1
     F.gr.SF.L1.Points←((Th[0]+1)↑F.YX)⍪B[0;]
     F.gr.SF.L2.Points←B[0;]⍪((Th[1]-102)↓Th[0]↓F.YX)⍪B[1;]
     F.gr.SF.L3.Points←B[1;]⍪Th[1]↓F.YX
 }


 getXCoords←{
 ⍝⍟ Copyright (C) 2018 by Stephen M. Mansour
 ⍝∇ Translate distribution density coordinates
 ⍝∇ Four Cases       cv1, cv2, pr1, pr2
 ⍝∊ Utility
 ⍝⍺  Distribution Parameters
 ⍝⍺⍺ Distribution function
 ⍝⍵  Syntax matrix
 ⍝←  X Coordinates for critical Values
     ⎕IO←0 ⋄ ⎕ML←3                    ⍝ Set system variables
     p Z←⍺                            ⍝ Parameters
     s2←⍵[2;1]∊'=≠',,¨'=' '≠' 'between' 'outside'  ⍝ Two sided?
     cv←⍵[1;1]∊⊂'criticalValue'       ⍝ Critical Value?
     cv⍱s2:⍵[3 3;1]                   ⍝ pr 1-sided
     s2∧~cv:⍺⍺{x←⍎('-'⎕R'¯')⍕⍵[3;1]   ⍝ pr 2-sided
         ⍵[2;1]∊'∊' 'in':x
         ⍵[2;1]∊'=≠',,¨'=≠':x x
         2=≢x:x ⋄ 1≠≢x:'Error'
         q←p ⍺⍺ probability>x
         x,←p ⍺⍺ criticalValue>q
         x[⍋x]}⍵                      ⍝ sort
     cv∧~s2:⍎⍕Z Z                     ⍝ cv 1-sided
     FS←¯1*⍵[2;1]∊(,'≠')'≠' 'between' ⍝ cv 2-sided
     q←FS{FS=1:0.5×1+⍵×¯1 1           ⍝
         |0 1-0.5×⍵}⍵[3;1]
     p ⍺⍺ criticalValue>q
 }


 pop←{0::0 0 0 ⋄ 1<≡⍵:⊃∇¨⍵ ⋄ ⍵≡'stat':3/0 ⋄
        ⍝ ⍺⍺⍎'#.(',⍵,')'}    ⍝ Populate statistics?
     ⍺⍺ NS.UserSpace⍎⍵}


:EndNamespace 
